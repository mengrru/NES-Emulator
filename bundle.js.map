{"version":3,"file":"bundle.js","sources":["../node_modules/svelte/internal/index.mjs","../src/core/public.def.ts","../src/core/memory-map.ts","../src/core/ppu/registers.ts","../src/core/ppu/colors.ts","../src/core/ppu/timing.ts","../src/core/ppu/index.ts","../src/core/joypad/index.ts","../src/core/bus/index.ts","../src/core/logger.ts","../src/core/cpu/utils.ts","../src/core/cpu/addressing-mode.ts","../src/core/cpu/registers.ts","../src/core/cpu/instructions.ts","../src/core/cpu/opcode.ts","../src/core/nes.ts","../src/core/cpu/index.ts","../src/core/screen/index.ts","../src/core/cartridges/index.ts","../src/ui/index.svelte","../src/ui/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.3' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export type BYTE = number\nexport type BYTE2 = number\nexport type BIT = number\nexport type INT8 = number\nexport type UINT8 = number\nexport type UINT16 = number\nexport type ADDR = number // 16bit\n\nexport const NESFileSymbol = [0x4e, 0x45, 0x53, 0x1a]\nexport const PRG_ROM_PAGE_SIZE = 16 * 1024\nexport const CHR_ROM_PAGE_SIZE = 8 * 1024\nexport enum Mirroring {\n    VERTICAL,\n    HORIZONTAL,\n    FOUR_SCREEN\n}\n\nexport interface CartridgeResolvedData {\n    PRGROM: Uint8Array,\n    CHRROM: Uint8Array,\n    mapper: number,\n    screenMirroring: Mirroring\n}\n\nexport interface MemoryMap {\n    ADDR_SPACE: {\n        PRG_ROM_START: ADDR,\n        PRG_ROM_END: ADDR,\n        CPU_RAM_START?: ADDR,\n        CPU_RAM_END?: ADDR,\n        PPU_REG_START?: ADDR,\n        PPU_REG_END?: ADDR,\n    },\n    IR: any\n}","// load program code into memory starting at 0x8000 address.\n// Program ROM: 0x8000 - 0xffff\n\nimport type { MemoryMap } from \"./public.def\";\n\n// instruction stream start somewhere in this space (not necessarily at 0x8000)\nexport const NESCPUMap: MemoryMap = {\n    ADDR_SPACE: {\n        CPU_RAM_START: 0x0,\n        CPU_RAM_END: 0x1fff,\n\n        PPU_REG_START: 0x2000,\n        PPU_REG_END: 0x3fff,\n\n        PRG_ROM_START: 0x8000,\n        PRG_ROM_END: 0xffff,\n    },\n    IR: {\n        RESET: 0xfffc,\n    }\n}\n\nexport const NESPPUMap = {\n    ADDR_SPACE: {\n        CHR_ROM_START: 0x0,\n        CHR_ROM_END: 0x1fff,\n\n        VRAM_START: 0x2000,\n        VRAM_END: 0x3eff,\n\n        PALETTES_START: 0x3f00,\n        PALETTES_END: 0x3fff\n    },\n}\n\nexport const PPUReg = {\n    Controller: 0x2000,\n    Mask: 0x2001,\n    // report PPU status\n    Status: 0x2002, // read-only\n    // OAM: Object Attribute Memory\n    // the space responsible for sprites\n    OAM_Address: 0x2003,\n    OAM_Data: 0x2004,\n    Scroll: 0x2005,\n    Address: 0x2006,\n    Data: 0x2007,\n    // Direct Memory Access\n    // for fast copying of 256 bytes from CPU RAM to OAM\n    OAM_DMA: 0x4014\n}\n","import { PPU } from \".\"\nimport type { BIT, UINT16, UINT8 } from \"../public.def\"\n\nclass FlagReg {\n    value: BIT[] = Array(8).fill(0)\n    constructor () {}\n    set (data: UINT8) {\n        this.value = data.toString(2).split('').reverse().map(e => parseInt(e))\n    }\n    get (): UINT8 {\n        return parseInt(this.value.reverse().map(e => e.toString()).join(''), 2)\n    }\n    updateBit (i: number, data: number) {\n        this.value[i] = data\n    }\n}\n\nclass SingleWriteReg {\n    value: UINT8 = 0\n    constructor () {}\n    set (data: UINT8) {\n        this.value = data\n    }\n    get (): UINT8 {\n        return this.value\n    }\n    inc (n = 1) {\n        let sum = this.value + n\n        this.value = sum & 0xff\n    }\n}\n\nclass DoubleWriteReg {\n    // [high, low]\n    value: UINT8[] = [0, 0]\n    sethi: boolean = true\n    constructor () {}\n    set (data: UINT16) {\n        this.value[0] = data >> 8\n        this.value[1] = data & 0xff\n    }\n    get (): UINT16 {\n        return (this.value[0] << 8) | this.value[1]\n    }\n    updateByte (data: UINT8) {\n        if (this.sethi) {\n            this.value[0] = data\n        } else {\n            this.value[1] = data\n        }\n        this.sethi = !this.sethi\n    }\n    inc (n: UINT8) {\n        let sum = this.value[1] + n\n        this.value[1] = sum & 0xff\n        if (sum > this.value[1]) {\n            this.value[0] = (this.value[0] + 1) & 0xff\n        }\n    }\n    reset () {\n        this.sethi = true\n    }\n}\n\n\n// 0x2000 write\nexport class REG_Controller extends FlagReg {\n    ppu: PPU\n    constructor (ppu: PPU) {\n        super()\n        this.ppu = ppu\n    }\n    get nametable (): UINT16 {\n        const n = (this.value[1] << 1) | this.value[0]\n        switch (n) {\n            case 0: return 0x2000\n            case 1: return 0x2400\n            case 2: return 0x2800\n            case 3: return 0x2c00\n        }\n    }\n    get vramAddrInc (): UINT8 {\n        return this.value[2] ? 32 : 1\n    }\n    set vramAddrInc (v: UINT8) {\n        this.value[2] = v === 32 ? 1 : 0\n    }\n    get spriteAddr (): UINT16 {\n        return this.value[3] ? 0x1000 : 0\n    }\n    set spriteAddr (v: UINT16) {\n        this.value[3] = v === 0x1000 ? 1 : 0\n    }\n    get backgroundAddr (): UINT16 {\n        return this.value[4] ? 0x1000 : 0\n    }\n    set backgroundAddr (v: UINT16) {\n        this.value[4] = v === 0x1000 ? 1 : 0\n    }\n    get spriteSize (): number {\n        return this.value[5] ? 8 * 16 : 8 * 8\n    }\n    set spriteSize (v: number) {\n        this.value[5] = v === 8 * 16 ? 1 : 0\n    }\n    get ppuSelect (): BIT {\n        return this.value[6]\n    }\n    set ppuSelect (v: BIT) {\n        this.value[6] = v\n    }\n    get hasNMI (): boolean {\n        return !!this.value[7]\n    }\n    set hasNMI (v: boolean) {\n        const before = this.value[7]\n        this.value[7] = +v\n        if (!before && v && this.ppu.regStatus.inVblank) {\n            this.ppu.IR_NMI()\n        }\n    }\n}\n\n// 0x2001 write\nexport class REG_Mask extends FlagReg {\n    constructor () {\n        super()\n    }\n    get greyscale (): boolean {\n        return !!this.value[0]\n    }\n    get showBgInLeftmost (): boolean {\n        return !!this.value[1]\n    }\n    get showSpritesInLeftmost (): boolean {\n        return !!this.value[2]\n    }\n    get showBg (): boolean {\n        return !!this.value[3]\n    }\n    get showSprites (): boolean {\n        return !!this.value[4]\n    }\n    get emRed (): boolean {\n        return !!this.value[5]\n    }\n    get emGreen (): boolean {\n        return !!this.value[6]\n    }\n    get emBlue (): boolean {\n        return !!this.value[7]\n    }\n}\n\n// 0x2002 read\nexport class REG_Status extends FlagReg {\n    constructor () {\n        super()\n    }\n    get spriteOverflow (): boolean {\n        return !!this.value[5]\n    }\n    set spriteOverflow (v: boolean) {\n        this.value[5] = +v\n    }\n    get sprite0Hit (): boolean {\n        return !!this.value[6]\n    }\n    set sprite0Hit (v: boolean) {\n        this.value[6] = +v\n    }\n    get inVblank (): boolean {\n        return !!this.value[7]\n    }\n    set inVblank (v: boolean) {\n        this.value[7] = +v\n    } \n}\n\n// 0x2003 write\nexport class REG_OAMAddress extends SingleWriteReg {\n    constructor () {\n        super ()\n    }\n}\n\n// 0x2004 read/write\nexport class REG_OAMData extends SingleWriteReg {\n    constructor () {\n        super()\n    }\n}\n\n// 0x2005 write*2\nexport class REG_Scroll extends DoubleWriteReg {\n    constructor () {\n        super()\n    }\n    get x (): number {\n        return this.value[0]\n    }\n    get y (): number {\n        return this.value[1]\n    }\n}\n\n// 0x2006 write*2\nexport class REG_Address extends DoubleWriteReg {\n    constructor () {\n        super()\n    }\n}\n\n// 0x2007 read/write\nexport class REG_Data extends SingleWriteReg {\n    constructor () {\n        super()\n    }\n}\n\n// 0x4014 write\nexport class REG_OAMDMA extends SingleWriteReg {\n    constructor () {\n        super()\n    }\n}\n","import type {RGB} from \"./ppu.def\"\n\nexport default [\n    '#6d6d6d', '#002491', '#0000da', '#6d48da', '#91006d', '#b6006d', '#b62400', '#914800',\n    '#6d4800', '#244800', '#006d24', '#009100', '#004848', '#000000', '#000000', '#000000',\n\n    '#b6b6b6', '#006dda', '#0048ff', '#9100ff', '#b600ff', '#ff0091', '#ff0000', '#da6d00',\n    '#916d00', '#249100', '#009100', '#00b66d', '#009191', '#000000', '#000000', '#000000',\n\n    '#ffffff', '#6db6ff', '#9191ff', '#da6dff', '#ff00ff', '#ff6dff', '#ff9100', '#ffb600',\n    '#dada00', '#6dda00', '#00ff00', '#48ffda', '#00ffff', '#000000', '#000000', '#000000',\n\n    '#ffffff', '#b6daff', '#dab6ff', '#ffb6ff', '#ff91ff', '#ffb6b6', '#ffda91', '#ffff48',\n    '#ffff6d', '#b6ff48', '#91ff6d', '#48ffda', '#91daff', '#000000', '#000000', '#000000'\n].map(hexColorToRGB) as RGB[]\n\nfunction hexColorToRGB (hexColor: string): number[] {\n    hexColor = hexColor.slice(1)\n    return [\n        parseInt(hexColor.slice(0, 2), 16),\n        parseInt(hexColor.slice(2, 4), 16),\n        parseInt(hexColor.slice(4), 16)\n    ]\n}\n","import {PPU} from \"./index\";\n\nconst Scanline = {\n    Each: [0, 261],\n    PreRender: 261,\n    Visible: [0, 239],\n    PostRender: 240,\n    VerticalBlanking: [241, 260]\n}\n\nexport default class PPUTiming {\n    private t = Array.from(Array(262)).map(e => Array.from(Array(341)).map(e => []))\n    private ppu: PPU\n\n    constructor (ppu: PPU) {\n        this.ppu = ppu\n\n        this.init()\n    }\n\n    exec (scanline: number, cycle: number) {\n        this.t[scanline][cycle].forEach(f => f())\n    }\n\n    private init () {\n        this.setAction(Scanline.Each, 340, () => {\n            if (this.ppu.isSprite0Hit) {\n                this.ppu.regStatus.sprite0Hit = true\n            }\n        })\n        this.setAction(240, 0, () => {\n            this.ppu.frame()\n        })\n        this.setAction(241, 340, () => {\n            this.ppu.regStatus.inVblank = true\n            this.ppu.regStatus.sprite0Hit = false\n            if (this.ppu.regController.hasNMI) {\n                this.ppu.IR_NMI()\n            }\n        })\n        this.setAction(261, 1, () => {\n            this.ppu.regStatus.inVblank = false\n            this.ppu.regStatus.sprite0Hit = false\n        })\n        this.setAction(Scanline.Each, 256, () => {\n            if (this.ppu.renderingEnable) {\n                this.ppu.v++\n            }\n        })\n        this.setAction(Scanline.Each, 257, () => {\n            if (this.ppu.renderingEnable) {\n                this.ppu.v &= 0b111_1011_1110_0000\n                this.ppu.v |= (this.ppu.t & 0b000_0100_0001_1111)\n            }\n        })\n        this.setAction(Scanline.PreRender, [280, 304], () => {\n            if (this.ppu.renderingEnable) {\n                this.ppu.v &= 0b000_0100_0001_1111\n                this.ppu.v |= (this.ppu.t & 0b111_1011_1110_0000)\n            }\n        })\n        this.setAction(Scanline.Each, [328, 340], () => {\n        })\n        this.setAction(Scanline.Each, [0, 256], () => {})\n    }\n\n    private setAction (scanline: number | number[], cycle: number | number[], action: () => void) {\n        if (typeof scanline === 'number' && typeof cycle === 'number') {\n            this.t[scanline][cycle].push(action)\n        } else if (Array.isArray(scanline) && Array.isArray(cycle)) {\n            for (let i = scanline[0]; i <= scanline[1]; i++) {\n                for (let j = cycle[0]; j <= cycle[1]; j++) {\n                    this.t[i][j].push(action)\n                }\n            }\n        } else if (Array.isArray(scanline)) {\n            for (let i = scanline[0]; i <= scanline[1]; i++) {\n                this.t[i][cycle as number].push(action)\n            }\n        } else if (Array.isArray(cycle)){\n            for (let i = cycle[0]; i <= cycle[1]; i++) {\n                this.t[scanline][i].push(action)\n            }\n        }\n    }\n\n}\n","import Bus from \"../bus\"\nimport { NESPPUMap, PPUReg } from \"../memory-map\"\nimport { Mirroring } from \"../public.def\"\nimport type { BYTE, BIT, UINT16, UINT8 } from \"../public.def\"\nimport { REG_Address, REG_Controller, REG_Data, REG_Mask, REG_OAMAddress, REG_OAMData, REG_OAMDMA, REG_Scroll, REG_Status } from \"./registers\"\nimport Colors from './colors'\nimport type {RGB, Tile} from \"./ppu.def\"\nimport PPUTiming from \"./timing\"\n\n/**\n* Graphics data\n* 8 * 8 pixel image could use up to 4 colors.\n* (background tile can have 4 colors, a sprite tile can have 3 colors)\n* 8 * 8 * 2 = 128 bits = 16 bytes to codify a single tile\n*/\n\n/**\n * Two communication channels exist between CPU and PPU:\n * - CPU is driving communication through IO registers\n * - PPU sends an interrupt signal to CPU upon entering V-BLANK period\n * \n * PPU renders 262 scanlines per frame.\n * (0 - 240 are visible scanlines, the rest are so-called vertical overscan)\n * Each scanline lasts for 341 PPU clock cycles, with each clock cycle producing on pixel.\n * (the first 256 pixels are visible, the rest is horizontal overscan)\n * NES screen resolution is 320*240, thus scanlines 241 - 262 are not visible.\n * \n * Upon entering the 241st scanline, PPU triggers VBlank NMI on the CPU.\n * PPU makes no memory accesses during 241 - 262 scanlines, so PPU memory can be freely accessed by the program.\n * The majority of games play it safe and update the screen state only during this period,\n * essentially preparing the view state for the next frame.\n * \n * https://bugzmanov.github.io/nes_ebook/chapter_6_1.html\n */\n\ntype PPUAddr = UINT16\ntype VRAMAddr = UINT16\ntype OAMAddr = UINT8\ntype ScreenX = number\ntype ScreenY = number\ntype NametableX = number\ntype NametableY = number\ntype DoubleScreenX = number\ntype DoubleScreenY = number\n\ninterface VRAMDataWrapper {\n    data: number,\n    attrIndex: number,\n    paletteIndexPosi: number\n}\n\nconst { CHR_ROM_START, CHR_ROM_END,\n    VRAM_START, VRAM_END,\n    PALETTES_START, PALETTES_END } = NESPPUMap.ADDR_SPACE\n\nexport class PPU {\n    bus: Bus\n\n    mirroring: Mirroring\n    CHRROM: Uint8Array\n    paletteTable: number[] = Array(32).fill(0)\n    VRAM: number[] = Array(2048).fill(0)\n    OAMData: number[] = Array(64 * 4).fill(0)\n\n    _clockCycle: number = 0\n    scanline: number = 0\n\n    internalBuf: UINT8 = 0\n    v: UINT16 = 0\n    t: UINT16 = 0\n    x: UINT8 = 0\n    w: UINT8 = 0\n\n    regController = new REG_Controller(this)\n    regMask = new REG_Mask()\n    regStatus = new REG_Status()\n    regOAMAddress = new REG_OAMAddress()\n    regOAMData = new REG_OAMData()\n    regScroll = new REG_Scroll()\n    regAddress = new REG_Address()\n    regData = new REG_Data()\n    regOAMDMA = new REG_OAMDMA()\n\n    timing = new PPUTiming(this)\n\n    VRAMMap: VRAMDataWrapper[] = genVRAMMap()\n\n    constructor (bus: Bus) {\n        this.CHRROM = bus.rom.CHRROM\n        this.mirroring = bus.rom.screenMirroring\n        this.bus = bus\n    }\n\n    get clockCycle () {\n        return this._clockCycle\n    }\n\n    set clockCycle (value) {\n        if (value > this._clockCycle) {\n            const old = this._clockCycle\n            for (let i = 0; i < value - old; i++) {\n                this._clockCycle++\n                this.tick()\n            }\n        } else {\n            this._clockCycle = value\n        }\n    }\n\n    // read/write to CPU\n    // all behavior is when CPU reads or writes\n    get write () {\n        const self = this\n        return {\n            [PPUReg.Controller] (data: UINT8 | BIT, i: number = -1) {\n                if (i === -1) {\n                    self.regController.set(data)\n                } else {\n                    self.regController.updateBit(i, data)\n                }\n                self.t &= 0b111_0011_1111_1111\n                self.t |= (data & 0b11) << 10\n            },\n            [PPUReg.Mask] (data: UINT8 | BIT, i: number = -1) {\n                self.regMask.set(data)\n            },\n            [PPUReg.OAM_Address] (data: UINT8) {\n                self.regOAMAddress.set(data)\n                self.regOAMData.set(self.OAMRead(data))\n            },\n            [PPUReg.OAM_Data] (data: UINT8) {\n                self.regOAMData.set(data)\n                self.OAMWrite(self.regOAMAddress.get(), data)\n                self.regOAMAddress.inc()\n            },\n            [PPUReg.Scroll] (data: UINT8) {\n                self.regScroll.updateByte(data)\n                if (self.w === 0) {\n                    self.t &= 0b111_1111_1110_0000\n                    self.t |= (data & 0b1111_1000) >> 3\n                    self.x = data & 0b0000_0111\n                    self.w = 1\n                } else {\n                    self.t &= 0b000_1100_0001_1111\n                    self.t |= (data & 0b1100_0000) << 2\n                    self.t |= (data & 0b0011_1000) << 2\n                    self.t |= (data & 0b111) << 12\n                    self.w = 0\n                }\n            },\n            [PPUReg.Address] (data: UINT8) {\n                self.regAddress.updateByte(data)\n                if (self.w === 0) {\n                    self.t &= 0b000_0000_1111_1111\n                    self.t |= (data & 0b11_1111) << 8\n                    self.w = 1\n                } else {\n                    self.t &= 0b111_1111_0000_0000\n                    self.t |= data\n                    self.v = self.t\n                    self.w = 0\n                }\n            },\n            [PPUReg.Data] (data: UINT8) {\n                self.regData.set(data)\n                self.memWrite(self.regAddress.get(), data)\n                self.regAddress.inc(self.regController.vramAddrInc)\n            },\n            OAM_DMA (data: UINT8, page: UINT8[]) {\n                self.regOAMDMA.set(data)\n                if (page.length !== 0) {\n                    self.writePagetoOAM(page)\n                }\n            }\n        }\n    }\n\n    get read () {\n        const self = this\n        return {\n            [PPUReg.Mask] () {\n                return self.regMask.get()\n            },\n            [PPUReg.Scroll] () {\n                // after reading PPUSTATUS to reset the address latch\n                self.regScroll.reset()\n                return self.regScroll.get()\n            },\n            [PPUReg.Controller] () {\n                return self.regController.get()\n            },\n            [PPUReg.OAM_Address] () {\n                return self.regOAMAddress.get()\n            },\n            [PPUReg.Address] () {\n                return self.regAddress.value[1]\n            },\n            [PPUReg.Status] () {\n                self.w = 0\n                self.regScroll.reset()\n                self.regAddress.reset()\n                return self.regStatus.get()\n            },\n            [PPUReg.OAM_Data] () {\n               // return self.regOAMData.get()\n               return self.OAMRead(self.regOAMAddress.get())\n            },\n            [PPUReg.Data] () {\n                const addr = self.regAddress.get()\n                const data = self.memRead(addr)\n                self.regData.set(data)\n                // read or write access to 0x2007 increments the 0x2006\n                // the increment size is determined by the state of the Control register\n                // but in practice this operate will lead to wrong render result.\n                // self.regAddress.inc(self.regController.vramAddrInc)\n                return self.regData.get()\n            },\n        }\n    }\n\n    /**\n     * the PPU renders 262 scan lines per frame\n     * each scanline lasts for 341 PPU clock cycles\n     * upon entering scanline 241, PPU triggers NMI interrupt\n     * PPU clock cycles are 3 times faster than CPU clock cycles\n     */\n    private tick () {\n        if (this._clockCycle === 341) {\n\n            this._clockCycle = 0\n            this.scanline++\n\n            if (this.scanline === 262) {\n                this.scanline = 0\n            }\n        }\n\n        this.timing.exec(this.scanline, this._clockCycle)\n    }\n\n    get isSprite0Hit (): boolean {\n        const x = this.OAMData[3]\n        const y = this.OAMData[0]\n        return (this.scanline === y) && (x <= this._clockCycle) && this.regMask.showSprites\n    }\n\n    get renderingEnable (): boolean {\n        return this.regMask.showBg || this.regMask.showSprites\n    }\n\n    IR_NMI () {\n        /**\n         * in addition to scanline position,\n         * PPU would immidiately trigger NMI if both of these\n         * conditions are met:\n         * 1. PPU is VBLANK state\n         * 2. \"Generate NMI\" bit in the controll Register is update from 0 to 1\n         */\n        this.bus.cpu.IR_NMI()\n    }\n\n    private writePagetoOAM (page: UINT8[]) {\n        this.OAMData = page\n    }\n\n    private OAMRead (addr: OAMAddr): UINT8 {\n        return this.OAMData[addr]\n    }\n\n    private OAMWrite (addr: OAMAddr, data: UINT8) {\n        this.OAMData[addr] = data\n    }\n\n    private VRAMRead (addr: PPUAddr): UINT8 {\n        const realAddr = mirroringAddr(addr - VRAM_START, this.mirroring)\n        return this.VRAM[realAddr]\n    }\n\n    private VRAMWrite (addr: PPUAddr, data: UINT8) {\n        const realAddr = mirroringAddr(addr - VRAM_START, this.mirroring)\n        this.VRAM[realAddr] = data\n\n        const VRAMAddr = addr - VRAM_START\n        if (VRAMAddr < 0x3c0) {\n            const i = VRAMAddr\n            this.VRAMMap[i + Math.floor(i / 32) * 32].data = data\n        } else if (VRAMAddr >= 0x400 && VRAMAddr < 0x7c0) {\n            const i = VRAMAddr - 0x400\n            this.VRAMMap[i + (Math.floor(i / 32) + 1) * 32].data = data\n        } else if (VRAMAddr >= 0x800 && VRAMAddr < 0xbc0) {\n            const i = VRAMAddr - 64 * 2\n            this.VRAMMap[i + Math.floor((i - 0x800) / 32) * 32].data = data\n        } else if (VRAMAddr >= 0xc00 && VRAMAddr < 0xfc0) {\n            const i = VRAMAddr - 0x400 - 64 * 2\n            this.VRAMMap[i + (Math.floor((i - 0x800) / 32) + 1) * 32].data = data\n        }\n    }\n\n    private memRead (addr: PPUAddr) {\n        addr %= 0x4000\n        const res = this.internalBuf\n        switch (true) {\n            case addr >= CHR_ROM_START && addr <= CHR_ROM_END:\n                this.internalBuf = this.CHRROM[addr]\n                return res\n            case addr >= VRAM_START && addr <= VRAM_END:\n                this.internalBuf = this.VRAMRead(addr)\n                return res\n            case addr >= PALETTES_START && addr <= PALETTES_END:\n                return this.paletteTable[addr - PALETTES_START]\n            default:\n                console.warn('invalid PPU memRead.' + addr.toString(16))\n        }\n    }\n\n    private memWrite (addr: PPUAddr, data: UINT8) {\n        addr %= 0x4000\n        if (addr < 0x2000) {\n            addr += 0x2000\n        }\n        switch (true) {\n            case addr >= VRAM_START && addr <= VRAM_END:\n                return this.VRAMWrite(addr, data)\n            case addr >= PALETTES_START && addr <=PALETTES_END:\n                this.paletteTable[addr - PALETTES_START] = data\n                return\n            default:\n                console.warn('invalid PPU memWrite.' + addr.toString(16))\n        }\n    }\n\n    frame (){\n        this.renderBackground()\n        this.renderSprites()\n        this.bus.screen.render()\n    }\n\n    /*\n    private getPixelFromScrollCoord (X: DoubleScreenX, Y: DoubleScreenY) {\n        const CHRBank = this.regController.backgroundAddr\n        const tileX = Math.floor(X / 8), tileY = Math.floor(Y / 8)\n        const tileLeftTopX = X % 8, tileLeftTopY = Y % 8\n        const tileStartAddr = this.VRAMMap[tileY * 64 + tileX] * 16 + CHRBank\n\n        const nametableStartAddr = this.regController.nametable\n        const startVRAMAddr = mirroringAddr(nametableStartAddr - VRAM_START, this.mirroring)\n        const attributeTable = this.VRAM.slice(\n            startVRAMAddr, startVRAMAddr + 1024\n        ).slice(-64)\n\n        const tile = (combineToATile(\n            this.CHRROM.slice(tileStartAddr, tileStartAddr + 8),\n            this.CHRROM.slice(tileStartAddr + 8, tileStartAddr + 16),\n            getBgPalette(this.paletteTable, paletteIndex)\n        ))\n    }\n    */\n\n    private renderBackground () {\n        const nametableStartAddr = this.regController.nametable\n        const CHRBank = this.regController.backgroundAddr\n\n        const startVRAMAddr = mirroringAddr(nametableStartAddr - VRAM_START, this.mirroring)\n        const attributeTable = this.VRAM.slice(\n            startVRAMAddr, startVRAMAddr + 1024\n        ).slice(-64)\n        const LEN = 32 * 30\n        const scale = this.bus.screen.scale\n        const res = []\n        for (let i = nametableStartAddr, j = 0; i < nametableStartAddr + LEN; i++, j++) {\n            // const realPPUAddr = scrollAddr(this.mirroring, nametableStartAddr, i, this.regScroll.x, this.regScroll.y)\n            const tileStartAddr = (this.VRAMRead(i) || 0) * 16 + CHRBank\n            const paletteIndex = getPaletteIndex(j % 32, Math.floor(j / 32), attributeTable)\n            const tile = (combineToATile(\n                this.CHRROM.slice(tileStartAddr, tileStartAddr + 8),\n                this.CHRROM.slice(tileStartAddr + 8, tileStartAddr + 16),\n                getBgPalette(this.paletteTable, paletteIndex)\n            ))\n            this.bus.screen.drawATile(tile, j % 32 * scale * 8, Math.floor(j / 32) * scale * 8)\n        }\n    }\n\n    private renderSprites () {\n        const oam = this.OAMData\n        const scale = this.bus.screen.scale\n        for (let i = oam.length - 4; i >= 0; i-=4) {\n            const x = oam[i + 3]\n            const y = oam[i]\n            const index = oam[i + 1]\n            const attr = oam[i + 2]\n\n            const priority = attr >> 5 & 1\n            if (priority) {\n                continue\n            }\n            const flipH = (attr >> 6 & 1) ? true : false\n            const flipV = (attr >> 7 & 1) ? true : false\n            const palette = getSpritePalette(this.paletteTable, attr & 0b11)\n\n            const CHRBank = this.regController.spriteAddr\n            const tileStartAddr = CHRBank + index * 16\n\n            const tile = combineToATile(\n                this.CHRROM.slice(tileStartAddr, tileStartAddr + 8),\n                this.CHRROM.slice(tileStartAddr + 8, tileStartAddr + 16),\n                palette, flipV, flipH, true\n            )\n\n            this.bus.screen.drawATile(tile, x * scale, y * scale)\n        }\n    }\n\n    tiles_test (): Tile[] {\n        const len = this.CHRROM.length\n        const output = []\n        for (let i = 0; i < len; i += 16) {\n            output.push(combineToATile(\n                this.CHRROM.slice(i, i + 8),\n                this.CHRROM.slice(i + 8, i + 16)\n            ))\n        }\n        return output\n    }\n}\n\nfunction getBgPalette (paletteTable: number[], paletteIndex: number): number[] {\n    return paletteTable.slice(paletteIndex * 4, paletteIndex * 4 + 4)\n}\n\nfunction getSpritePalette (paletteTable: number[], paletteIndex: number): number[] {\n    const N = 4 * 4\n    return paletteTable.slice(N + paletteIndex * 4, N + paletteIndex * 4 + 4)\n}\n\nfunction getPaletteIndex (x: number, y: number, attributeTable: number[]): number {\n    const attributeIndex = Math.floor(x / 4) + Math.floor(y / 4) * (32 / 4)\n    const attribute = attributeTable[attributeIndex]\n    switch ((Math.floor(x % 4 / 2) << 1) + Math.floor(y % 4 / 2)) {\n        case 0b00: return attribute & 0b11\n        case 0b10: return (attribute >> 2) & 0b11\n        case 0b01: return (attribute >> 4) & 0b11\n        case 0b11: return (attribute >> 6) & 0b11\n    }\n}\n\nfunction computedAttributeIndex (x: number, y: number) {\n    return Math.floor(x / 4) + Math.floor(y / 4) * (32 / 4)\n}\n\nfunction computedPaletteIndexPosi (x: number, y: number) {\n    switch ((Math.floor(x % 4 / 2) << 1) + Math.floor(y % 4 / 2)) {\n        case 0b00: return 0\n        case 0b10: return 1\n        case 0b01: return 2\n        case 0b11: return 3\n    }\n}\n\nfunction genVRAMMap (): VRAMDataWrapper[] {\n    const LEN = 32 * 30 * 4\n    const res = Array(LEN)\n    for (let VRAMAddr = 0; VRAMAddr < LEN; VRAMAddr++) {\n        let x, y, mappedIndex\n        if (VRAMAddr < 0x3c0) {\n            const i = VRAMAddr\n            mappedIndex = i + Math.floor(i / 32) * 32\n            x = VRAMAddr % 32\n            y = Math.floor(VRAMAddr / 32)\n        } else if (VRAMAddr >= 0x400 && VRAMAddr < 0x7c0) {\n            const i = VRAMAddr - 0x400\n            mappedIndex = i + (Math.floor(i / 32) + 1) * 32\n            x = i % 32\n            y = Math.floor(i / 32)\n        } else if (VRAMAddr >= 0x800 && VRAMAddr < 0xbc0) {\n            const i = VRAMAddr - 64 * 2\n            mappedIndex = i + Math.floor((i - 0x800) / 32) * 32\n            x = (VRAMAddr - 0x800) % 32\n            y = Math.floor((VRAMAddr - 0x800) / 32)\n        } else if (VRAMAddr >= 0xc00 && VRAMAddr < 0xfc0) {\n            const i = VRAMAddr - 0x400 - 64 * 2\n            mappedIndex = i + (Math.floor((i - 0x800) / 32) + 1) * 32\n            x = (VRAMAddr - 0xc00) % 32\n            y = Math.floor((VRAMAddr - 0xc00) / 32)\n        }\n        res[mappedIndex] = {\n            data: 0,\n            attrIndex: computedAttributeIndex(x, y),\n            paletteIndexPosi: computedPaletteIndexPosi(x, y)\n        }\n    }\n    return res\n}\n\nfunction scrollAddr (mirroring: Mirroring, nametableStartAddr: PPUAddr, addr: PPUAddr, x: number, y: number): PPUAddr {\n    if (mirroring === Mirroring.HORIZONTAL) {\n        const haddr = addr + Math.floor(x / 8) * 32\n        if (haddr - nametableStartAddr < (0x400 - 64)) {\n            return haddr\n        }\n        switch (nametableStartAddr) {\n            case 0x2000:\n                return haddr + 0x800 + 64\n            case 0x2400:\n                return haddr + 0x800 + 64\n            case 0x2800:\n                return haddr - 0x800 + 64\n            case 0x2c00:\n                return haddr - 0x1000 + 64\n        }\n    }\n    if (mirroring === Mirroring.VERTICAL) {\n        const vaddr = addr + Math.floor(x / 8) * 30\n        if (vaddr < 0x3000) {\n            return vaddr\n        }\n        return vaddr - 0x1000\n    }\n}\n\nfunction mirroringAddr (addr: VRAMAddr, mirroring: Mirroring): VRAMAddr {\n    if (mirroring === Mirroring.VERTICAL) {\n        return addr % 0x800\n    } else if (mirroring === Mirroring.HORIZONTAL) {\n        if (Math.floor(addr / 0x400) === 1) {\n            return addr - 0x400\n        } else if (Math.floor(addr / 0x400) === 2) {\n            return addr - 0x400\n        } else if (Math.floor(addr / 0x400) === 3) {\n            return addr - 0x800\n        } else {\n            return addr\n        }\n    }\n    console.warn(`VRAM addr: ${addr}`)\n}\n\nfunction combineToATile (low: Uint8Array, high: Uint8Array, palette?: number[], v: boolean = false, h: boolean = false, isSprite: boolean = false): Tile {\n    if (!palette) {\n        palette = [0x23, 0x27, 0x30]\n    }\n    const res = []\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            const a = v ? 7 - i : i, b = h ? 7 - j : j\n            if (res[a] === undefined) {\n                res[a] = []\n            }\n            const code = (ByteN(high[i], j) << 1) | ByteN(low[i], j)\n            if (isSprite) {\n                res[a][b] = code === 0 ? [0, 0, 0, 0] : Colors[palette[code]]\n            } else {\n                res[a][b] = Colors[palette[code]]\n            }\n        }\n    }\n    return res\n}\n\nfunction ByteN (x: BYTE, n: number): number {\n    return ((x >> n) & 1)\n}\n\nfunction drawPixelFromVRAM (addr: VRAMAddr, map: RGB[]) {}\n","import type {UINT8} from \"../public.def\"\n\nexport enum Btn {\n    A        = 0b00000001,\n    B        = 0b00000010,\n    Select   = 0b00000100,\n    Start    = 0b00001000,\n    Up       = 0b00010000,\n    Down     = 0b00100000,\n    Left     = 0b01000000,\n    Right    = 0b10000000,\n}\nexport default class JoyPad {\n    strobe: boolean = false\n    btn: Btn = Btn.A\n    curReportedBtn: number = 0\n\n    constructor () {\n        //this.initUI()\n    }\n\n    write (data: UINT8) {\n        this.strobe = (data & 1) === 1\n        if (this.strobe) {\n            this.curReportedBtn = 0\n        }\n    }\n    read (): UINT8 {\n        // after 8 bits are read, all subsequent bits will report 1\n        // on a standard NES controller.\n        if (this.curReportedBtn > 7) {\n            return 1\n        }\n        const res = (this.btn & (1 << this.curReportedBtn)) >> this.curReportedBtn\n        if (!this.strobe && this.curReportedBtn <= 7) {\n            this.curReportedBtn += 1\n        }\n        return res\n    }\n    setBtn (btn: Btn) {\n        this.btn = btn\n    }\n    initUI () {\n        document.onkeydown = (event) => {\n            switch (event.code.toLowerCase()) {\n                case 'keya':\n                    this.setBtn(Btn.Left)\n                    break\n                case 'keyd':\n                    this.setBtn(Btn.Right)\n                    break\n                case 'keys':\n                    this.setBtn(Btn.Down)\n                    break\n                case 'keyw':\n                    this.setBtn(Btn.Up)\n                    break\n                case 'keyj':\n                    this.setBtn(Btn.A)\n                    break\n                case 'keyk':\n                    this.setBtn(Btn.B)\n                    break\n                case 'enter':\n                    this.setBtn(Btn.Select)\n                    break\n                case 'space':\n                    this.setBtn(Btn.Start)\n                    break\n            }\n        }\n    }\n}\n","import Cartridge from \"../cartridges\";\nimport { PRG_ROM_PAGE_SIZE } from \"../public.def\";\nimport type { ADDR, BYTE, CartridgeResolvedData, MemoryMap, UINT8 } from \"../public.def\";\nimport { NESCPUMap, PPUReg } from '../memory-map'\nimport { PPU } from \"../ppu/index\";\nimport CPU from \"../cpu/index\";\nimport Screen from \"../screen/index\";\nimport JoyPad from \"../joypad/index\";\n\n/**\n * cpu gets access to memory using three buses:\n * address bus carries the address of a required location\n * control bus notifies if it's a read or write access\n * data bus carries the byte of data being read or written\n * \n * CPU RAM has only 2 KiB of ram space,\n * and only 11 bits is enough for addressing RAM space.\n * CPU has [0x0000, 0x2000) addressing space reserved for RAM space(13 bits),\n * so the 2highest bits have no effect when accessing RAM.\n */\nconst CPU_ADDRESS_MASK = 0b00000111_11111111\nconst PPU_REGISTER_MASK = 0b00100000_00000111\n\nconst { CPU_RAM_START, CPU_RAM_END,\n    PRG_ROM_START, PRG_ROM_END,\n    PPU_REG_START, PPU_REG_END } = NESCPUMap.ADDR_SPACE\n\n// for addr mirroring\nfunction Addr (addr: ADDR) {\n    switch (true) {\n        case addr >= CPU_RAM_START && addr <= CPU_RAM_END :\n            return addr & CPU_ADDRESS_MASK\n        case addr >= PPU_REG_START && addr <= PPU_REG_END:\n            return addr & PPU_REGISTER_MASK\n        default:\n            return addr\n    }\n}\nfunction Max (addr: ADDR) {\n    switch (true) {\n        case addr <= 0xff:\n            return 0xff\n        case addr <= CPU_RAM_END:\n            return CPU_ADDRESS_MASK // 0x07ff\n        case addr <= PPU_REG_END:\n            return PPU_REGISTER_MASK // 0x2007\n        case addr >= PRG_ROM_START:\n            return PRG_ROM_END\n        default:\n            console.warn('不在范围内的地址' + addr)\n            return 0x7fff\n    }\n}\n\nfunction Min (addr: ADDR) {\n    switch (true) {\n        // https://atariage.com/forums/topic/72382-6502-indirect-addressing-ff-behavior/\n        case addr <= 0xff:\n            return 0\n        case addr <= CPU_RAM_END:\n            return CPU_RAM_START // 0\n        case addr <= PPU_REG_END:\n            return PPU_REG_START // 0x2000\n        case addr >= PRG_ROM_START:\n            return PRG_ROM_START\n        default:\n            console.warn('不在范围内的地址' + addr)\n            return 0x7fff\n    }\n}\n\nexport default class Bus {\n    private _PRGROMLen: number\n    private _rom: CartridgeResolvedData\n    private _ppu: PPU\n    private _cpu: CPU\n    private _screen: Screen\n    private _joypad: JoyPad\n    private memory: number[]\n\n    constructor () {\n        this.memory = Array(0xffff + 1).fill(0)\n        this._joypad = new JoyPad()\n    }\n    memoryReset () {\n        this.memory = Array(0xffff + 1).fill(0)\n    }\n    get PRGROMLen () {\n        return this._PRGROMLen\n    }\n    get rom () {\n        return this._rom\n    }\n    get ppu () {\n        return this._ppu\n    }\n    get cpu () {\n        return this._cpu\n    }\n    get screen () {\n        return this._screen\n    }\n    get joypad () {\n        return this._joypad\n    }\n    connectCartridge (cartridge: Cartridge) {\n        if (!this.cpu) {\n            throw new Error('there has no CPU.')\n        }\n        this.memoryReset()\n\n        const cdata = cartridge.resolve()\n        this._rom = cdata\n        this._PRGROMLen = cdata.PRGROM.length\n        this._ppu = new PPU(this)\n\n        this.cpu.IR_RESET()\n    }\n    connectScreen (screen: Screen) {\n        this._screen = screen\n    }\n    connectCPU (cpu: CPU) {\n        this._cpu = cpu\n    }\n    memWrite8 (addr: number, value: number) {\n        addr = Addr(addr)\n        switch (addr) {\n            case PPUReg.Controller:\n            case PPUReg.Mask:\n            case PPUReg.OAM_Address:\n            case PPUReg.OAM_Data:\n            case PPUReg.Scroll:\n            case PPUReg.Address:\n            case PPUReg.Data:\n                this.ppu.write[addr](value)\n                return\n            case PPUReg.OAM_DMA:\n                this.ppu.write.OAM_DMA(value, this.readPage(value))\n                return\n            case 0x4016:\n                this.joypad.write(value)\n                return\n        }\n        if (addr >= PRG_ROM_START && addr <= PRG_ROM_END) {\n            console.warn(`invalid write addr ${addr} on PRG_ROM`)\n            return\n        } else if (addr >= PPU_REG_START && addr <= PPU_REG_END) {\n            console.warn(`address ${addr.toString()} is read-only.`)\n            return\n        }\n        this.memory[Addr(addr)] = value\n    }\n    memRead8 (addr: number): UINT8 {\n        addr = Addr(addr)\n        switch (true) {\n            case addr === 0x4016:\n                return this.joypad.read()\n            case addr === PPUReg.Data:\n            case addr === PPUReg.OAM_Data:\n            case addr === PPUReg.Status:\n                return this.ppu.read[addr]()\n            case addr >= PRG_ROM_START && addr <= PRG_ROM_END:\n                return this.readPRGROM(addr - 0x8000)\n            case addr >= PPU_REG_START && addr <= PPU_REG_END:\n                // console.warn(`address ${addr.toString(16)} is write-only.`)\n                return this.ppu.read[addr]()\n            default:\n                return this.memory[addr]\n        }\n    }\n    memWrite16 (addr: number, value: number) {\n        addr = Addr(addr)\n        this.memory[addr] = value & 0xff\n        if (addr <= Max(addr)) {\n            this.memory[addr + 1] = value >> 8\n        }\n    }\n    memRead16 (addr: number) {\n        addr = Addr(addr)\n        switch (addr) {\n            case NESCPUMap.IR.RESET:\n                return this.rom.PRGROM.length === 0x4000 ? 0xc000 : 0x8000\n        }\n        if (addr + 1 <= Max(addr)) {\n            return (this.memRead8(addr + 1) << 8) | this.memRead8(addr)\n        } else {\n            return (this.memRead8(Min(addr)) << 8) | this.memRead8(addr)\n        }\n    }\n    private readPage (hiAddr: UINT8): UINT8[] {\n        switch (true) {\n            case hiAddr >= 0 && hiAddr <= 0x1f:\n                return this.memory.slice(hiAddr << 8, (hiAddr + 1) << 8)\n            // other ram or rom todo.\n            default:\n                console.warn(`invalid read page addr ${hiAddr}`)\n                return []\n        }\n    }\n    private readPRGROM (addr: number) {\n        return this.rom.PRGROM[addr % this.rom.PRGROM.length]\n    }\n}\n","export default class Logger {\n    constructor () {\n    }\n\n    static screen (text: string) {\n        const p = document.createElement('span')\n        p.innerText = text + '\\n'\n        document.getElementsByTagName('body')[0].appendChild(p)\n    }\n\n    static console (text: string) {\n        console.log(text)\n    }\n}","import Logger from '../logger'\nimport type { INT8, UINT8, UINT16, ICPU } from './cpu.d'\n\n// little-endian\n/*\nexport function data (...args: number[]): number {\n    return parseInt('0x' + args.sort((a, b) => b - a).map(index => MEMORY[index].toString(16).slice(2)).join())\n}\nexport function twoByte (arg: number): number {\n    return data(arg, arg + 1)\n}\n*/\nexport function int8 (value: number): INT8 {\n    if ((value & 128) > 0) {\n        return value - 0x100\n    }\n    return value\n}\nexport function uint8(value: number): UINT8 {\n    return value & 0xff\n}\nexport function uint16(value: number): UINT16 {\n    return value & 0xffff\n}\nexport function page(value: number): number {\n    return (value & 0xff00) >> 8\n}\nexport function isCrossPage (addr1: UINT16, addr2: UINT16): number {\n    return (addr1 & 0xff00) !== (addr2 & 0xff00) ? 1 : 0\n}\nexport function to16 (n: number): string {\n    return n.toString(16)\n}\n\nexport function cpuRunningHelper (cpu: ICPU) {\n    let timeout: number\n    let animationFrameId: number\n    const runningCallbackTable: { [T: number]: (() => void)[] } = {}\n    const shouldStop = () => {\n        const { ADDR_SPACE } = cpu.memoryMap\n        if (cpu.Register.PC === ADDR_SPACE.PRG_ROM_END ||\n            cpu.Register.PC === 0 ||\n            // when you run test, use this condition\n            // (cpu.Register.PC - ADDR_SPACE.PRG_ROM_START) === cpu.bus.PRGROMLen ||\n            cpu.memRead(cpu.Register.PC) === -1 ||\n            cpu.Register.PC === -1) {\n            return true\n        }\n        return false\n    }\n    cpu.subClockCycleHandler = function (curClockCycle) {\n        for (const T in runningCallbackTable) {\n            if (curClockCycle % parseInt(T) === 0) {\n                runningCallbackTable[T].forEach(fn => fn())\n            }\n        }\n    }\n\n    return {\n        stop () {\n          cancelAnimationFrame(animationFrameId)\n        },\n        exec (num: number = 1) {\n            for (let i = 0; i < num; i++) {\n                const s = cpu.step()\n                Logger.screen(\n                    `${to16(s.PC)} ${to16(s.opcInfo.opcode)} ${to16(s.arg)}` + \n                    `   ${s.opcInfo.name} ${to16(s.addrRes.addr === -1 ? s.addrRes.data : s.addrRes.addr)}` +\n                    `   A:${s.A} X:${s.X} Y:${s.Y} P:${s.P} SP:${s.SP} CYC:${s.CYC}`\n                )\n            }\n        },\n        launch (done?: () => void) {\n            /**\n             * every runner render 1 frame can bring fluent picture\n             */\n            const F = 1.78 * 1000000\n            const FPS = Math.ceil(F / 341 / 261 * 3)\n            const T = 1000 / F\n            // why divide 3? if not I can get 3 renders per runner. why?\n            const RunnerStepCount = Math.floor(F / FPS / 3)\n            const RunnerInterval = Math.floor(1000 / FPS)\n\n            let lastTime = window.performance.now()\n\n            const runner = () => {\n                const curTime = window.performance.now()\n                const diff = curTime - lastTime\n                if (diff < RunnerInterval) {\n                    animationFrameId = requestAnimationFrame(runner)\n                    return\n                }\n                lastTime = curTime\n                for (let i = 0; i < RunnerStepCount; i++) {\n                    /*\n                    if (shouldStop()) {\n                        clearInterval(timeout)\n                        typeof done === 'function'\n                            ? done()\n                            : ''\n                        return\n                    }\n                    */\n                    try {\n                        cpu.step()\n                    } catch (e) {\n                        clearInterval(timeout)\n                        throw e\n                    }\n                }\n                animationFrameId = requestAnimationFrame(runner)\n            }\n            animationFrameId = requestAnimationFrame(runner)\n        },\n        launchWithLog () {\n            timeout = setInterval(() => {\n                for (let i = 0; i < 97; i++) {\n                    if (shouldStop()) {\n                        clearInterval(timeout)\n                        return\n                    }\n                    try {\n                        const s = cpu.step()\n                        Logger.console(\n                            `${to16(s.PC)} ${('0' + to16(s.opcInfo.opcode)).slice(-2)} ${to16(s.arg)}` + \n                            `   ${s.opcInfo.name} ${to16(s.addrRes.addr === -1 ? s.addrRes.data : s.addrRes.addr)}` +\n                            `   A:${s.A} X:${s.X} Y:${s.Y} P:${s.P} SP:${s.SP} CYC:${s.CYC}`\n                        )\n                    } catch (e) {\n                        clearInterval(timeout)\n                        throw e\n                    }\n                }\n            }, 15);\n        },\n        registerRunningCallback (fn: () => void, T: number) {\n            if (!runningCallbackTable[T]) {\n                runningCallbackTable[T] = []\n            }\n            if (typeof fn === 'function') {\n                runningCallbackTable[T].push(fn)\n            }\n        }\n    }\n\n\n\n}\n","import type { OPERAND, ADDR, ZADDR, ADDRMODE, ICPU } from './cpu.d'\nimport { isCrossPage } from './utils'\n\n/**\n * input: opcode arg: number, Register\n * output: data: number\n */\nexport const AddressingMode: ADDRMODE = {\n    I: function (cpu: ICPU, arg: OPERAND) {\n        return { addr: -1, data: arg, isCrossPage: 0 }\n    },\n    Z: function (cpu: ICPU, arg: ZADDR) {\n        return { addr: arg, data: cpu.memRead(arg), isCrossPage: 0 }\n    },\n    ZX: function (cpu: ICPU, arg: ZADDR) {\n        const addr = (arg + cpu.Register.X) & 0xff\n        return { addr, data: cpu.memRead(addr), isCrossPage: 0 }\n    },\n    ZY: function (cpu: ICPU, arg: ZADDR) {\n        const addr = (arg + cpu.Register.Y) & 0xff\n        return { addr, data: cpu.memRead(addr), isCrossPage: 0 }\n    },\n    A: function (cpu: ICPU, arg: ADDR) {\n        return { addr: arg, data: cpu.memRead(arg), isCrossPage: 0 }\n    },\n    AX: function (cpu: ICPU, arg: ADDR) {\n        const addr = (arg + cpu.Register.X) & 0xffff\n        return { addr, data: cpu.memRead(addr), isCrossPage: isCrossPage(arg, addr) }\n    },\n    AY: function (cpu: ICPU, arg: ADDR) {\n        const addr = (arg + cpu.Register.Y) & 0xffff\n        return { addr, data: cpu.memRead(addr), isCrossPage: isCrossPage(arg, addr) }\n    },\n    IN: function (cpu: ICPU, arg: ADDR, instruction?: string) {\n        let addr = cpu.memRead(arg, 2)\n        if (instruction === 'JMP') {\n        // https://www.reddit.com/r/EmuDev/comments/fi29ah/6502_jump_indirect_error/\n            const pageHead = arg & 0xff00\n            const hi = (arg & 0xff) === 0xff ? pageHead : arg + 1\n            addr = cpu.memRead(arg) | (cpu.memRead(hi) << 8)\n        }\n        return { addr, data: cpu.memRead(addr), isCrossPage: 0 }\n    },\n    IX: function (cpu: ICPU, arg: ZADDR) {\n        // nestest cff2\n        const addr = cpu.memRead((arg + cpu.Register.X) & 0xff, 2)\n        return { addr, data: cpu.memRead(addr), isCrossPage: 0 }\n    },\n    IY: function (cpu: ICPU, arg: ZADDR) {\n        const res = cpu.memRead(arg, 2)\n        const addr = (res + cpu.Register.Y) & 0xffff\n        return { addr, data: cpu.memRead(addr), isCrossPage: isCrossPage(res, addr) }\n    },\n    IM: function (cpu: ICPU, arg: number) {\n        return { addr: -1, data: -1, isCrossPage: 0 }\n    },\n    R: function (cpu: ICPU, arg: number) {\n        return { addr: -1, data: arg, isCrossPage: 0 }\n    },\n    AC: function (cpu: ICPU, arg: number) {\n        return { addr: -1, data: cpu.Register.A, isCrossPage: 0 }\n    }\n}\n","import type { PS } from \"./cpu\"\n\nexport const setFlag = {\n    C: function (PS: PS, value: boolean) {\n        PS.C = value ? 1 : 0\n    },\n    Z: function (PS: PS, value: number) {\n        PS.Z = value === 0 ? 1 : 0\n    },\n    I:  function (PS: PS, value: number) {\n        PS.I = value\n    },\n    D:  function (PS: PS, value: number) {\n        PS.D = value\n    },\n    // 2-bits\n    // bit5, bit4\n    B:  function (PS: PS, action: string) {\n        const bit4 = (function (a: string) {\n            switch (a) {\n                case 'PHP':\n                case 'BRK':\n                    return 1\n                case 'IRQ':\n                case 'NMI':\n                case 'PLP':\n                    return 0\n            }\n            return 0\n        })(action)\n        const bit5 = 1\n        PS.B = (bit5 << 1) | bit4\n    },\n    V:  function (PS: PS, m: number, n: number, r: number) {\n        // ?\n        // overflow occurs if\n        // (m ^ r) & (n ^ r) & 0x80 is nonzero\n        // const res = !!((m ^ r) & (n ^ r) & 0x80)\n        // reference to https://github.com/skilldrick/easy6502/blob/gh-pages/simulator/assembler.js\n        const res = !!((m ^ n) & 0x80)\n        PS.V = res ? 1 : 0\n    },\n    N:  function (PS: PS, value: number) {\n        PS.N = (value & 128) >> 7\n    },\n}\n\nexport function Registers (PS: PS) {\n    return {\n        PC: 0x0000,\n        // between 0x0100 and 0x01ff\n        SP: 0xff,\n        A: 0x00,\n        X: 0x00,\n        Y: 0x00,\n        get PS () {\n            return PS.C & 1 |\n                (PS.Z << 1) & 2 |\n                (PS.I << 2) & 4 |\n                (PS.D << 3) & 8 |\n                (PS.B << 4) & (16 + 32) |\n                (PS.V << 6) & 64 |\n                (PS.N << 7) & 128\n        },\n        set PS (v) {\n            PS.C = v & 1\n            PS.Z = (v & 2) >> 1\n            PS.I = (v & 4) >> 2\n            PS.D = (v & 8) >> 3\n            PS.B = (v & (16 + 32)) >> 4\n            PS.V = (v & 64) >> 6\n            PS.N = (v & 128) >> 7\n        }\n    }\n}\n\nexport function ProcessorStatus () {\n    return {\n        C: 0,\n        Z: 0,\n        I: 0,\n        D: 0,\n        // ?\n        B: 0b11,\n        V: 0,\n        N: 0\n    }\n}\n","import type { ADDRMODE, PS, ICPU, AddressingRes } from './cpu.d'\nimport { setFlag } from './registers'\nimport { int8, uint16, isCrossPage } from './utils'\n\n// Register Memory\n// return cycle\nexport const Instructions = {\n    ADC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        // const data = AddressingMode[mode](cpu, arg)\n        const { data } = addrRes\n        const a = cpu.Register.A\n        const b = data\n        const c = cpu.PS.C\n        const res = a + b + c\n        cpu.Register.A = res & 0xff\n\n        setFlag.Z(cpu.PS, cpu.Register.A)\n        setFlag.C(cpu.PS, res > 0xff)\n        setFlag.N(cpu.PS, cpu.Register.A)\n        // setFlag.V(cpu.PS, a, data + cpu.PS.C, res & 0xff)\n\n        if (a < 128 && b < 128) {\n            cpu.PS.V = cpu.Register.A < 128 ? 0 : 1\n        } else if (a >= 128 && b >= 128) {\n            cpu.PS.V = cpu.Register.A < 128 ? 1 : 0\n        } else {\n            cpu.PS.V = 0\n        }\n\n        if (mode === 'AX' || mode === 'AY' || mode === 'IY') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    SBC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.ADC(cpu, mode, { ...addrRes, data: ((~addrRes.data) & 0xff) })\n\n        if (mode === 'AX' || mode === 'AY' || mode === 'IY') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    AND: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const res = cpu.Register.A & data\n        cpu.Register.A = res\n\n        setFlag.Z(cpu.PS, cpu.Register.A)\n        setFlag.N(cpu.PS, cpu.Register.A)\n\n        if (mode === 'AX' || mode === 'AY' || mode === 'IY') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    ASL: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data, addr } = addrRes\n        const res = data << 1\n        // ?\n        if (mode == 'AC') {\n            cpu.Register.A = res & 0xff\n        } else {\n            cpu.memWrite(addr, res & 0xff)\n        }\n        setFlag.C(cpu.PS, res > 0xff)\n        setFlag.Z(cpu.PS, res & 0xff)\n        setFlag.N(cpu.PS, res & 0xff)\n        return 0\n    },\n\n    BCC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const oldPC = cpu.Register.PC\n        if (cpu.PS.C === 0) {\n            const res = uint16(cpu.Register.PC + int8(data))\n            cpu.Register.PC = res\n            if (isCrossPage(cpu.Register.PC, oldPC)) {\n                return 2\n            } else {\n                return 1\n            }\n        }\n        return 0\n    },\n\n    BCS: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const oldPC = cpu.Register.PC\n        if (cpu.PS.C === 1) {\n            const res = uint16(cpu.Register.PC + int8(data))\n            cpu.Register.PC = res\n            if (isCrossPage(cpu.Register.PC, oldPC)) {\n                return 2\n            } else {\n                return 1\n            }\n        }\n        return 0\n    },\n\n    BEQ: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const oldPC = cpu.Register.PC\n        if (cpu.PS.Z === 1) {\n            const res = uint16(cpu.Register.PC + int8(data))\n            cpu.Register.PC = res\n            if (isCrossPage(cpu.Register.PC, oldPC)) {\n                return 2\n            } else {\n                return 1\n            }\n        }\n        return 0\n    },\n\n    BIT: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        setFlag.Z(cpu.PS, cpu.Register.A & data)\n        cpu.PS.V = (data >> 6) & 1\n        setFlag.N(cpu.PS, data)\n        return 0\n    },\n\n    BMI: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const oldPC = cpu.Register.PC\n        if (cpu.PS.N === 1) {\n            const res = uint16(cpu.Register.PC + int8(data))\n            cpu.Register.PC = res\n            if (isCrossPage(cpu.Register.PC, oldPC)) {\n                return 2\n            } else {\n                return 1\n            }\n        }\n        return 0\n    },\n    \n    BNE: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const oldPC = cpu.Register.PC\n        if (cpu.PS.Z === 0) {\n            const res = uint16(cpu.Register.PC + int8(data))\n            cpu.Register.PC = res\n            if (isCrossPage(cpu.Register.PC, oldPC)) {\n                return 2\n            } else {\n                return 1\n            }\n        }\n        return 0\n    },\n\n    BPL: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const oldPC = cpu.Register.PC\n        if (cpu.PS.N === 0) {\n            const res = uint16(cpu.Register.PC + int8(data))\n            cpu.Register.PC = res\n            if (isCrossPage(cpu.Register.PC, oldPC)) {\n                return 2\n            } else {\n                return 1\n            }\n        }\n        return 0\n    },\n\n    BRK: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        // The program counter and processor status are pushed on the stack \n        cpu.push16(cpu.Register.PC)\n        cpu.push8(cpu.Register.PS)\n        // then the IRQ interrupt vector at $FFFE/F is loaded into the PC\n        cpu.Register.PC = cpu.memRead(0xfffe, 2)\n        // and the break flag in the status set to one\n        setFlag.B(cpu.PS, 'BRK')\n        return 0\n    },\n\n    BVC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const oldPC = cpu.Register.PC\n        if (cpu.PS.V === 0) {\n            const res = uint16(cpu.Register.PC + int8(data))\n            cpu.Register.PC = res\n            if (isCrossPage(cpu.Register.PC, oldPC)) {\n                return 2\n            } else {\n                return 1\n            }\n        }\n        return 0\n    },\n\n    BVS: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const oldPC = cpu.Register.PC\n        if (cpu.PS.V === 1) {\n            const res = uint16(cpu.Register.PC + int8(data))\n            cpu.Register.PC = res\n            if (isCrossPage(cpu.Register.PC, oldPC)) {\n                return 2\n            } else {\n                return 1\n            }\n        }\n        return 0\n    },\n\n    CLC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.PS.C = 0\n        return 0\n    },\n\n    CLD: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.PS.D = 0\n        return 0\n    },\n\n    CLI: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.PS.I = 0\n        return 0\n    },\n\n    CLV: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.PS.V = 0\n        return 0\n    },\n\n    CMP: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const r = cpu.Register.A\n        setFlag.C(cpu.PS, r >= data)\n        setFlag.Z(cpu.PS, r - data)\n        setFlag.N(cpu.PS, r - data)\n\n        if (mode === 'AX' || mode === 'AY' || mode === 'IY') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    CPX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const r = cpu.Register.X\n        setFlag.C(cpu.PS, r >= data)\n        setFlag.Z(cpu.PS, r - data)\n        setFlag.N(cpu.PS, r - data)\n        return 0\n    },\n\n    CPY: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const r = cpu.Register.Y\n        setFlag.C(cpu.PS, r >= data)\n        setFlag.Z(cpu.PS, r - data)\n        setFlag.N(cpu.PS, r - data)\n        return 0\n    },\n\n    DEC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr, data } = addrRes\n        const res = (data - 1) & 0xff\n        cpu.memWrite(addr, res)\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    DEX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = (cpu.Register.X - 1) & 0xff\n        cpu.Register.X = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    DEY: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = (cpu.Register.Y - 1) & 0xff\n        cpu.Register.Y = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    INC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr, data } = addrRes\n        const res = (data + 1) & 0xff\n        cpu.memWrite(addr, res)\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    INX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = (cpu.Register.X + 1) & 0xff\n        cpu.Register.X = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    INY: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = (cpu.Register.Y + 1) & 0xff\n        cpu.Register.Y = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    EOR: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const res = cpu.Register.A ^ data\n        cpu.Register.A = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n\n        if (mode === 'AX' || mode === 'AY' || mode === 'IY') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    JMP: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr } = addrRes\n        cpu.Register.PC = addr\n        return 0\n    },\n\n    JSR: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr } = addrRes\n        cpu.push16(cpu.Register.PC - 1)\n        cpu.Register.PC = addr\n        return 0\n    },\n\n    RTS: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.Register.PC = uint16(cpu.pull16() + 1)\n        // console.log('RTS:' + cpu.Register.PC.toString(16))\n        return 0\n    },\n\n    LDA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        cpu.Register.A = data\n        setFlag.Z(cpu.PS, cpu.Register.A)\n        setFlag.N(cpu.PS, cpu.Register.A)\n\n        if (mode === 'AX' || mode === 'AY' || mode === 'IY') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    LDX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        cpu.Register.X = data\n        setFlag.Z(cpu.PS, cpu.Register.X)\n        setFlag.N(cpu.PS, cpu.Register.X)\n\n        if (mode === 'AY') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    LDY: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        cpu.Register.Y = data\n        setFlag.Z(cpu.PS, cpu.Register.Y)\n        setFlag.N(cpu.PS, cpu.Register.Y)\n\n        if (mode === 'AX') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    LSR: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr, data } = addrRes\n        const res = data >> 1\n        if (mode === 'AC') {\n            cpu.Register.A = res\n        } else {\n            cpu.memWrite(addr, res)\n        }\n        cpu.PS.C = data & 1\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    NOP: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        return 0\n    },\n\n    ORA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { data } = addrRes\n        const res = cpu.Register.A | data\n        cpu.Register.A = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n\n        if (mode === 'AX' || mode === 'AY' || mode === 'IY') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    PHA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.push8(cpu.Register.A)\n        return 0\n    },\n\n    PHP: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        // there is no B bit\n        // reference https://github.com/skilldrick/easy6502/blob/gh-pages/simulator/assembler.js\n        cpu.push8(cpu.Register.PS | 0x30)\n        return 0\n    },\n\n    PLA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.pull8()\n        cpu.Register.A = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    PLP: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.pull8()\n        cpu.Register.PS = res\n        setFlag.B(cpu.PS, 'PLP')\n        return 0\n    },\n\n    ROL: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr, data } = addrRes\n        const res = (data << 1) | cpu.PS.C\n        if (mode === 'AC') {\n            cpu.Register.A = res & 0xff\n        } else {\n            cpu.memWrite(addr, res & 0xff)\n        }\n        setFlag.C(cpu.PS, (data & 128) > 0)\n        // ? only acc or all\n        setFlag.Z(cpu.PS, res & 0xff)\n        setFlag.N(cpu.PS, res & 0xff)\n        return 0\n    },\n\n    ROR: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr, data } = addrRes\n        const res = (data >> 1) | (cpu.PS.C << 7)\n        if (mode === 'AC') {\n            cpu.Register.A = res & 0xff\n        } else {\n            cpu.memWrite(addr, res & 0xff)\n        }\n        setFlag.C(cpu.PS, (data & 1) > 0)\n        // ? only acc or all\n        setFlag.Z(cpu.PS, res & 0xff)\n        setFlag.N(cpu.PS, res & 0xff)\n        return 0\n    },\n\n    RTI: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        // ?\n        cpu.Register.PS = cpu.pull8()\n        setFlag.B(cpu.PS, 'IRQ')\n        cpu.Register.PC = cpu.pull16()\n        return 0\n    },\n\n    SEC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.PS.C = 1\n        return 0\n    },\n\n    SED: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.PS.D = 1\n        return 0\n    },\n\n    SEI: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.PS.I = 1\n        return 0\n    },\n\n    STA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr } = addrRes\n        cpu.memWrite(addr, cpu.Register.A)\n        return 0\n    },\n\n    STX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr } = addrRes\n        cpu.memWrite(addr, cpu.Register.X)\n        return 0\n    },\n\n    STY: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const { addr } = addrRes\n        cpu.memWrite(addr, cpu.Register.Y)\n        return 0\n    },\n\n    TAX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.Register.A\n        cpu.Register.X = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    TAY: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.Register.A\n        cpu.Register.Y = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    TSX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.Register.SP\n        cpu.Register.X = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    TXA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.Register.X\n        cpu.Register.A = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    TXS: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        cpu.Register.SP = cpu.Register.X\n        return 0\n    },\n\n    TYA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.Register.Y\n        cpu.Register.A = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    /* unofficial */\n    AAC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.AND(cpu, mode, addrRes)\n        if (cpu.Register.A >> 7 !== 0) {\n            setFlag.C(cpu.PS, true)\n        }\n        return 0\n    },\n\n    AAX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.Register.X & cpu.Register.A\n        cpu.memWrite(addrRes.addr, res)\n        return 0\n    },\n\n    ARR: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.AND(cpu, 'I', addrRes)\n        Instructions.ROR(cpu, 'AC', { addr: -1, data: cpu.Register.A, isCrossPage: 0 })\n        const bit5 = (cpu.Register.A >> 4) & 1\n        const bit6 = (cpu.Register.A >> 5) & 1\n        setFlag.C(cpu.PS, bit6 === 1)\n        cpu.PS.V = bit5 ^ bit6\n        return 0\n    },\n\n    ASR: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.AND(cpu, mode, addrRes)\n        Instructions.LSR(cpu, 'AC', { addr: -1, data: cpu.Register.A, isCrossPage: 0 })\n        return 0\n    },\n\n    ATX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.Register.A & addrRes.data\n        cpu.Register.A = res\n        cpu.Register.X = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        return 0\n    },\n\n    AXA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = cpu.Register.X & cpu.Register.A\n        cpu.Register.A = res\n        cpu.memWrite(addrRes.addr, res & 7)\n        return 0\n    },\n\n    AXS: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.STX(cpu, mode, addrRes)\n        Instructions.PHA(cpu, mode, addrRes)\n        Instructions.AND(cpu, mode, addrRes)\n        Instructions.STA(cpu, mode, addrRes)\n        Instructions.PLA(cpu, mode, addrRes)\n        return 0\n    },\n\n    DCP: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.DEC(cpu, mode, addrRes)\n        Instructions.CMP(cpu, mode, { ...addrRes, data: cpu.memRead(addrRes.addr) })\n        return 0\n    },\n\n    DOP: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.NOP(cpu, mode, addrRes)\n        Instructions.NOP(cpu, mode, addrRes)\n        return 0\n    },\n\n    ISC: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.INC(cpu, mode, addrRes)\n        Instructions.SBC(cpu, mode, { ...addrRes, data: cpu.memRead(addrRes.addr) })\n        return 0\n    },\n\n    KIL: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        // stop program counter (processor lock up)\n        throw new Error('KIL(HLT) is executed. ')\n    },\n\n    /*\n    'LAR': function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        return 0\n    },\n    */\n\n    LAX: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        const res = addrRes.data\n        cpu.Register.A = res\n        cpu.Register.X = res\n        setFlag.Z(cpu.PS, res)\n        setFlag.N(cpu.PS, res)\n        if (mode === 'AY' || mode === 'IY') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    RLA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.ROL(cpu, mode, addrRes)\n        Instructions.AND(cpu, mode, { ...addrRes, data: cpu.memRead(addrRes.addr) })\n        return 0\n    },\n\n    RRA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.ROR(cpu, mode, addrRes)\n        Instructions.ADC(cpu, mode, { ...addrRes, data: cpu.memRead(addrRes.addr) })\n        return 0\n    },\n\n    SLO: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.ASL(cpu, mode, addrRes)\n        Instructions.ORA(cpu, mode, { ...addrRes, data: cpu.memRead(addrRes.addr) })\n        return 0\n    },\n\n    SRE: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.LSR(cpu, mode, addrRes)\n        Instructions.EOR(cpu, mode, { ...addrRes, data: cpu.memRead(addrRes.addr) })\n        return 0\n    },\n\n    /*\n    'SXA': function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        return 0\n    },\n\n    'SYA': function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        return 0\n    },\n    */\n\n    TOP: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.NOP(cpu, mode, addrRes)\n        Instructions.NOP(cpu, mode, addrRes)\n        Instructions.NOP(cpu, mode, addrRes)\n        if (mode === 'AX') {\n            return addrRes.isCrossPage\n        }\n        return 0\n    },\n\n    XAA: function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        Instructions.TXA(cpu, 'IM', addrRes)\n        Instructions.AND(cpu, mode, addrRes)\n        return 0\n    },\n\n    /*\n    'XAS': function (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) {\n        return 0\n    },\n    */\n\n} as {\n    [instruction: string]: (cpu: ICPU, mode: keyof ADDRMODE, addrRes: AddressingRes) => number\n}\n","import type { ADDRMODE } from \"./cpu.d\"\n\nconst e = function (name: string, opcode: number, bytes: number, cycles: number, pageCycles: number, mode: keyof ADDRMODE) {\n    return {\n        name, opcode, bytes, cycles, mode, pageCycles\n    }\n}\n\nexport default {\n    0x69: e('ADC', 0x69, 2, 2, 0, 'I'),\n    0x65: e('ADC', 0x65, 2, 3, 0, 'Z'),\n    0x75: e('ADC', 0x75, 2, 4, 0, 'ZX'),\n    0x6d: e('ADC', 0x6d, 3, 4, 0, 'A'),\n    0x7d: e('ADC', 0x7d, 3, 4, 1, 'AX'),\n    0x79: e('ADC', 0x79, 3, 4, 1, 'AY'),\n    0x61: e('ADC', 0x61, 2, 6, 0, 'IX'),\n    0x71: e('ADC', 0x71, 2, 5, 1, 'IY'),\n\n    0x29: e('AND', 0x29, 2, 2, 0, 'I'),\n    0x25: e('AND', 0x25, 2, 3, 0, 'Z'),\n    0x35: e('AND', 0x35, 2, 4, 0, 'ZX'),\n    0x2d: e('AND', 0x2d, 3, 4, 0, 'A'),\n    0x3d: e('AND', 0x3d, 3, 4, 1, 'AX'),\n    0x39: e('AND', 0x39, 3, 4, 1, 'AY'),\n    0x21: e('AND', 0x21, 2, 6, 0, 'IX'),\n    0x31: e('AND', 0x31, 2, 5, 1, 'IY'),\n\n    0x0a: e('ASL', 0x0a, 1, 2, 0, 'AC'),\n    0x06: e('ASL', 0x06, 2, 5, 0, 'Z'),\n    0x16: e('ASL', 0x16, 2, 6, 0, 'ZX'),\n    0x0e: e('ASL', 0x0e, 3, 6, 0, 'A'),\n    0x1e: e('ASL', 0x1e, 3, 7, 0, 'AX'),\n\n    0x90: e('BCC', 0x90, 2, 2, 0, 'R'),\n\n    0xb0: e('BCS', 0xb0, 2, 2, 0, 'R'),\n\n    0xf0: e('BEQ', 0xf0, 2, 2, 0, 'R'),\n\n    0x24: e('BIT', 0x24, 2, 3, 0, 'Z'),\n    0x2c: e('BIT', 0x2c, 3, 4, 0, 'A'),\n\n    0x30: e('BMI', 0x30, 2, 2, 0, 'R'),\n\n    0xd0: e('BNE', 0xd0, 2, 2, 0, 'R'),\n\n    0x10: e('BPL', 0x10, 2, 2, 0, 'R'),\n\n    0x00: e('BRK', 0x00, 1, 7, 0, 'IM'),\n\n    0x50: e('BVC', 0x50, 2, 2, 0, 'R'),\n\n    0x70: e('BVS', 0x70, 2, 2, 0, 'R'),\n\n    0x18: e('CLC', 0x18, 1, 2, 0, 'IM'),\n\n    0xd8: e('CLD', 0xd8, 1, 2, 0, 'IM'),\n\n    0x58: e('CLI', 0x58, 1, 2, 0, 'IM'),\n\n    0xb8: e('CLV', 0xb8, 1, 2, 0, 'IM'),\n\n    0xc9: e('CMP', 0xc9, 2, 2, 0, 'I'),\n    0xc5: e('CMP', 0xc5, 2, 3, 0, 'Z'),\n    0xd5: e('CMP', 0xd5, 2, 4, 0, 'ZX'),\n    0xcd: e('CMP', 0xcd, 3, 4, 0, 'A'),\n    0xdd: e('CMP', 0xdd, 3, 4, 1, 'AX'),\n    0xd9: e('CMP', 0xd9, 3, 4, 1, 'AY'),\n    0xc1: e('CMP', 0xc1, 2, 6, 0, 'IX'),\n    0xd1: e('CMP', 0xd1, 2, 5, 1, 'IY'),\n\n    0xe0: e('CPX', 0xe0, 2, 2, 0, 'I'),\n    0xe4: e('CPX', 0xe4, 2, 3, 0, 'Z'),\n    0xec: e('CPX', 0xec, 3, 4, 0, 'A'),\n\n    0xc0: e('CPY', 0xc0, 2, 2, 0, 'I'),\n    0xc4: e('CPY', 0xc4, 2, 3, 0, 'Z'),\n    0xcc: e('CPY', 0xcc, 3, 4, 0, 'A'),\n\n    0xc6: e('DEC', 0xc6, 2, 5, 0, 'Z'),\n    0xd6: e('DEC', 0xd6, 2, 6, 0, 'ZX'),\n    0xce: e('DEC', 0xce, 3, 6, 0, 'A'),\n    0xde: e('DEC', 0xde, 3, 7, 0, 'AX'),\n\n    0xca: e('DEX', 0xca, 1, 2, 0, 'IM'),\n\n    0x88: e('DEY', 0x88, 1, 2, 0, 'IM'),\n\n    0x49: e('EOR', 0x49, 2, 2, 0, 'I'),\n    0x45: e('EOR', 0x45, 2, 3, 0, 'Z'),\n    0x55: e('EOR', 0x55, 2, 4, 0, 'ZX'),\n    0x4d: e('EOR', 0x4d, 3, 4, 0, 'A'),\n    0x5d: e('EOR', 0x5d, 3, 4, 1, 'AX'),\n    0x59: e('EOR', 0x59, 3, 4, 1, 'AY'),\n    0x41: e('EOR', 0x41, 2, 6, 0, 'IX'),\n    0x51: e('EOR', 0x51, 2, 5, 1, 'IY'),\n\n    0xe6: e('INC', 0xe6, 2, 5, 0, 'Z'),\n    0xf6: e('INC', 0xf6, 2, 6, 0, 'ZX'),\n    0xee: e('INC', 0xee, 3, 6, 0, 'A'),\n    0xfe: e('INC', 0xfe, 3, 7, 0, 'AX'),\n\n    0xe8: e('INX', 0xe8, 1, 2, 0, 'IM'),\n\n    0xc8: e('INY', 0xc8, 1, 2, 0, 'IM'),\n\n    0x4c: e('JMP', 0x4c, 3, 3, 0, 'A'),\n    0x6c: e('JMP', 0x6c, 3, 5, 0, 'IN'),\n\n    0x20: e('JSR', 0x20, 3, 6, 0, 'A'),\n\n    0xa9: e('LDA', 0xa9, 2, 2, 0, 'I'),\n    0xa5: e('LDA', 0xa5, 2, 3, 0, 'Z'),\n    0xb5: e('LDA', 0xb5, 2, 4, 0, 'ZX'),\n    0xad: e('LDA', 0xad, 3, 4, 0, 'A'),\n    0xbd: e('LDA', 0xbd, 3, 4, 1, 'AX'),\n    0xb9: e('LDA', 0xb9, 3, 4, 1, 'AY'),\n    0xa1: e('LDA', 0xa1, 2, 6, 0, 'IX'),\n    0xb1: e('LDA', 0xb1, 2, 5, 1, 'IY'),\n\n    0xa2: e('LDX', 0xa2, 2, 2, 0, 'I'),\n    0xa6: e('LDX', 0xa6, 2, 3, 0, 'Z'),\n    0xb6: e('LDX', 0xb6, 2, 4, 0, 'ZY'),\n    0xae: e('LDX', 0xae, 3, 4, 0, 'A'),\n    0xbe: e('LDX', 0xbe, 3, 4, 1, 'AY'),\n\n    0xa0: e('LDY', 0xa0, 2, 2, 0, 'I'),\n    0xa4: e('LDY', 0xa4, 2, 3, 0, 'Z'),\n    0xb4: e('LDY', 0xb4, 2, 4, 0, 'ZX'),\n    0xac: e('LDY', 0xac, 3, 4, 0, 'A'),\n    0xbc: e('LDY', 0xbc, 3, 4, 1, 'AX'),\n\n    0x4a: e('LSR', 0x4a, 1, 2, 0, 'AC'),\n    0x46: e('LSR', 0x46, 2, 5, 0, 'Z'),\n    0x56: e('LSR', 0x56, 2, 6, 0, 'ZX'),\n    0x4e: e('LSR', 0x4e, 3, 6, 0, 'A'),\n    0x5e: e('LSR', 0x5e, 3, 7, 0, 'AX'),\n\n    0xea: e('NOP', 0xea, 1, 2, 0, 'IM'),\n\n    0x09: e('ORA', 0x09, 2, 2, 0, 'I'),\n    0x05: e('ORA', 0x05, 2, 3, 0, 'Z'),\n    0x15: e('ORA', 0x15, 2, 4, 0, 'ZX'),\n    0x0d: e('ORA', 0x0d, 3, 4, 0, 'A'),\n    0x1d: e('ORA', 0x1d, 3, 4, 1, 'AX'),\n    0x19: e('ORA', 0x19, 3, 4, 1, 'AY'),\n    0x01: e('ORA', 0x01, 2, 6, 0, 'IX'),\n    0x11: e('ORA', 0x11, 2, 5, 1, 'IY'),\n\n    0x48: e('PHA', 0x48, 1, 3, 0, 'IM'),\n\n    0x08: e('PHP', 0x08, 1, 3, 0, 'IM'),\n\n    0x68: e('PLA', 0x68, 1, 4, 0, 'IM'),\n\n    0x28: e('PLP', 0x28, 1, 4, 0, 'IM'),\n\n    0x2a: e('ROL', 0x2a, 1, 2, 0, 'AC'),\n    0x26: e('ROL', 0x26, 2, 5, 0, 'Z'),\n    0x36: e('ROL', 0x36, 2, 6, 0, 'ZX'),\n    0x2e: e('ROL', 0x2e, 3, 6, 0, 'A'),\n    0x3e: e('ROL', 0x3e, 3, 7, 0, 'AX'),\n\n    0x6a: e('ROR', 0x6a, 1, 2, 0, 'AC'),\n    0x66: e('ROR', 0x66, 2, 5, 0, 'Z'),\n    0x76: e('ROR', 0x76, 2, 6, 0, 'ZX'),\n    0x6e: e('ROR', 0x6e, 3, 6, 0, 'A'),\n    0x7e: e('ROR', 0x7e, 3, 7, 0, 'AX'),\n\n    0x40: e('RTI', 0x40, 1, 6, 0, 'IM'),\n\n    0x60: e('RTS', 0x60, 1, 6, 0, 'IM'),\n\n    0xe9: e('SBC', 0xe9, 2, 2, 0, 'I'),\n    0xe5: e('SBC', 0xe5, 2, 3, 0, 'Z'),\n    0xf5: e('SBC', 0xf5, 2, 4, 0, 'ZX'),\n    0xed: e('SBC', 0xed, 3, 4, 0, 'A'),\n    0xfd: e('SBC', 0xfd, 3, 4, 1, 'AX'),\n    0xf9: e('SBC', 0xf9, 3, 4, 1, 'AY'),\n    0xe1: e('SBC', 0xe1, 2, 6, 0, 'IX'),\n    0xf1: e('SBC', 0xf1, 2, 5, 1, 'IY'),\n\n    0x38: e('SEC', 0x38, 1, 2, 0, 'IM'),\n\n    0xf8: e('SED', 0xf8, 1, 2, 0, 'IM'),\n\n    0x78: e('SEI', 0x78, 1, 2, 0, 'IM'),\n\n    0x85: e('STA', 0x85, 2, 3, 0, 'Z'),\n    0x95: e('STA', 0x95, 2, 4, 0, 'ZX'),\n    0x8d: e('STA', 0x8d, 3, 4, 0, 'A'),\n    0x9d: e('STA', 0x9d, 3, 5, 0, 'AX'),\n    0x99: e('STA', 0x99, 3, 5, 0, 'AY'),\n    0x81: e('STA', 0x81, 2, 6, 0, 'IX'),\n    0x91: e('STA', 0x91, 2, 6, 0, 'IY'),\n\n    0x86: e('STX', 0x86, 2, 3, 0, 'Z'),\n    0x96: e('STX', 0x96, 2, 4, 0, 'ZY'),\n    0x8e: e('STX', 0x8e, 3, 4, 0, 'A'),\n\n    0x84: e('STY', 0x84, 2, 3, 0, 'Z'),\n    0x94: e('STY', 0x94, 2, 4, 0, 'ZX'),\n    0x8c: e('STY', 0x8c, 3, 4, 0, 'A'),\n\n    0xaa: e('TAX', 0xaa, 1, 2, 0, 'IM'),\n\n    0xa8: e('TAY', 0xa8, 1, 2, 0, 'IM'),\n\n    0xba: e('TSX', 0xba, 1, 2, 0, 'IM'),\n\n    0x8a: e('TXA', 0x8a, 1, 2, 0, 'IM'),\n\n    0x9a: e('TXS', 0x9a, 1, 2, 0, 'IM'),\n\n    0x98: e('TYA', 0x98, 1, 2, 0, 'IM'),\n\n    // https://www.nesdev.com/undocumented_opcodes.txt\n    // https://www.masswerk.at/6502/6502_instruction_set.html\n    0x0b: e('AAC', 0x0b, 2, 2, 0, 'I'),\n    0x2b: e('AAC', 0x2b, 2, 2, 0, 'I'),\n\n    0x87: e('AAX', 0x87, 2, 3, 0, 'Z'),\n    0x97: e('AAX', 0x97, 2, 4, 0, 'ZY'),\n    0x83: e('AAX', 0x83, 2, 6, 0, 'IX'),\n    0x8f: e('AAX', 0x8f, 3, 4, 0, 'A'),\n\n    0x6b: e('ARR', 0x6b, 2, 2, 0, 'I'),\n\n    0x4b: e('ASR', 0x4b, 2, 2, 0, 'I'),\n\n    0xab: e('ATX', 0xab, 2, 2, 0, 'I'),\n\n    0x9f: e('AXA', 0x9f, 3, 5, 0, 'AY'),\n    0x93: e('AXA', 0x93, 2, 6, 0, 'IY'),\n\n    0xcb: e('AXS', 0xcb, 2, 2, 0, 'I'),\n\n    0xc7: e('DCP', 0xc7, 2, 5, 0, 'Z'),\n    0xd7: e('DCP', 0xd7, 2, 6, 0, 'ZX'),\n    0xcf: e('DCP', 0xcf, 3, 6, 0, 'A'),\n    0xdf: e('DCP', 0xdf, 3, 7, 0, 'AX'),\n    0xdb: e('DCP', 0xdb, 3, 7, 0, 'AY'),\n    0xc3: e('DCP', 0xc3, 2, 8, 0, 'IX'),\n    0xd3: e('DCP', 0xd3, 2, 8, 0, 'IY'),\n\n    0x04: e('DOP', 0x04, 2, 3, 0, 'Z'),\n    0x14: e('DOP', 0x14, 2, 4, 0, 'ZX'),\n    0x34: e('DOP', 0x34, 2, 4, 0, 'ZX'),\n    0x44: e('DOP', 0x44, 2, 3, 0, 'Z'),\n    0x54: e('DOP', 0x54, 2, 4, 0, 'ZX'),\n    0x64: e('DOP', 0x64, 2, 3, 0, 'Z'),\n    0x74: e('DOP', 0x74, 2, 4, 0, 'ZX'),\n    0x80: e('DOP', 0x80, 2, 2, 0, 'I'),\n    0x82: e('DOP', 0x82, 2, 2, 0, 'I'),\n    0x89: e('DOP', 0x89, 2, 2, 0, 'I'),\n    0xc2: e('DOP', 0xc2, 2, 2, 0, 'I'),\n    0xd4: e('DOP', 0xd4, 2, 4, 0, 'ZX'),\n    0xe2: e('DOP', 0xe2, 2, 2, 0, 'I'),\n    0xf4: e('DOP', 0xf4, 2, 4, 0, 'ZX'),\n\n    0xe7: e('ISC', 0xe7, 2, 5, 0, 'Z'),\n    0xf7: e('ISC', 0xf7, 2, 6, 0, 'ZX'),\n    0xef: e('ISC', 0xef, 3, 6, 0, 'A'),\n    0xff: e('ISC', 0xff, 3, 7, 0, 'AX'),\n    0xfb: e('ISC', 0xfb, 3, 7, 0, 'AY'),\n    0xe3: e('ISC', 0xe3, 2, 8, 0, 'IX'),\n    0xf3: e('ISC', 0xf3, 2, 8, 0, 'IY'),\n\n    0x02: e('KIL', 0x02, 1, 0, 0, 'IM'),\n    0x12: e('KIL', 0x12, 1, 0, 0, 'IM'),\n    0x22: e('KIL', 0x22, 1, 0, 0, 'IM'),\n    0x32: e('KIL', 0x32, 1, 0, 0, 'IM'),\n    0x42: e('KIL', 0x42, 1, 0, 0, 'IM'),\n    0x52: e('KIL', 0x52, 1, 0, 0, 'IM'),\n    0x62: e('KIL', 0x62, 1, 0, 0, 'IM'),\n    0x72: e('KIL', 0x72, 1, 0, 0, 'IM'),\n    0x92: e('KIL', 0x92, 1, 0, 0, 'IM'),\n    0xb2: e('KIL', 0xb2, 1, 0, 0, 'IM'),\n    0xd2: e('KIL', 0xd2, 1, 0, 0, 'IM'),\n    0xf2: e('KIL', 0xf2, 1, 0, 0, 'IM'),\n\n    0xbb: e('LAR', 0xbb, 3, 4, 1, 'AY'),\n\n    0xa7: e('LAX', 0xa7, 2, 3, 0, 'Z'),\n    0xb7: e('LAX', 0xb7, 2, 4, 0, 'ZY'),\n    0xaf: e('LAX', 0xaf, 3, 4, 0, 'A'),\n    0xbf: e('LAX', 0xbf, 3, 4, 1, 'AY'),\n    0xa3: e('LAX', 0xa3, 2, 6, 0, 'IX'),\n    0xb3: e('LAX', 0xb3, 2, 5, 1, 'IY'),\n\n    0x1a: e('NOP', 0x1a, 1, 2, 0, 'IM'),\n    0x3a: e('NOP', 0x3a, 1, 2, 0, 'IM'),\n    0x5a: e('NOP', 0x5a, 1, 2, 0, 'IM'),\n    0x7a: e('NOP', 0x7a, 1, 2, 0, 'IM'),\n    0xda: e('NOP', 0xda, 1, 2, 0, 'IM'),\n    0xfa: e('NOP', 0xfa, 1, 2, 0, 'IM'),\n\n    0x27: e('RLA', 0x27, 2, 5, 0, 'Z'),\n    0x37: e('RLA', 0x37, 2, 6, 0, 'ZX'),\n    0x2f: e('RLA', 0x2f, 3, 6, 0, 'A'),\n    0x3f: e('RLA', 0x3f, 3, 7, 0, 'AX'),\n    0x3b: e('RLA', 0x3b, 3, 7, 0, 'AY'),\n    0x23: e('RLA', 0x23, 2, 8, 0, 'IX'),\n    0x33: e('RLA', 0x33, 2, 8, 0, 'IY'),\n\n    0x67: e('RRA', 0x67, 2, 5, 0, 'Z'),\n    0x77: e('RRA', 0x77, 2, 6, 0, 'ZX'),\n    0x6f: e('RRA', 0x6f, 3, 6, 0, 'A'),\n    0x7f: e('RRA', 0x7f, 3, 7, 0, 'AX'),\n    0x7b: e('RRA', 0x7b, 3, 7, 0, 'AY'),\n    0x63: e('RRA', 0x63, 2, 8, 0, 'IX'),\n    0x73: e('RRA', 0x73, 2, 8, 0, 'IY'),\n\n    0xeb: e('SBC', 0xeb, 2, 2, 0, 'I'),\n\n    0x07: e('SLO', 0x07, 2, 5, 0, 'Z'),\n    0x17: e('SLO', 0x17, 2, 6, 0, 'ZX'),\n    0x0f: e('SLO', 0x0f, 3, 6, 0, 'A'),\n    0x1f: e('SLO', 0x1f, 3, 7, 0, 'AX'),\n    0x1b: e('SLO', 0x1b, 3, 7, 0, 'AY'),\n    0x03: e('SLO', 0x03, 2, 8, 0, 'IX'),\n    0x13: e('SLO', 0x13, 2, 8, 0, 'IY'),\n\n    0x47: e('SRE', 0x47, 2, 5, 0, 'Z'),\n    0x57: e('SRE', 0x57, 2, 6, 0, 'ZX'),\n    0x4f: e('SRE', 0x4f, 3, 6, 0, 'A'),\n    0x5f: e('SRE', 0x5f, 3, 7, 0, 'AX'),\n    0x5b: e('SRE', 0x5b, 3, 7, 0, 'AY'),\n    0x43: e('SRE', 0x43, 2, 8, 0, 'IX'),\n    0x53: e('SRE', 0x53, 2, 8, 0, 'IY'),\n\n    0x9e: e('SXA', 0x9e, 3, 5, 0, 'AY'),\n\n    0x9c: e('SYA', 0x9c, 3, 5, 0, 'AX'),\n\n    0x0c: e('TOP', 0x0c, 3, 4, 0, 'A'),\n    0x1c: e('TOP', 0x1c, 3, 4, 1, 'AX'),\n    0x3c: e('TOP', 0x3c, 3, 4, 1, 'AX'),\n    0x5c: e('TOP', 0x5c, 3, 4, 1, 'AX'),\n    0x7c: e('TOP', 0x7c, 3, 4, 1, 'AX'),\n    0xdc: e('TOP', 0xdc, 3, 4, 1, 'AX'),\n    0xfc: e('TOP', 0xfc, 3, 4, 1, 'AX'),\n\n    0x8b: e('XAA', 0x8b, 2, 2, 0, 'IM'),\n\n    0x9b: e('XAS', 0x9b, 3, 5, 0, 'AY'),\n} as {\n    [opc: number]: {\n        name: string,\n        opcode: number,\n        bytes: number,\n        cycles: number,\n        pageCycles: number,\n        mode: keyof ADDRMODE\n    }\n}\n","import CPU from './cpu/index'\nimport Cartridge from './cartridges/index'\nimport Bus from './bus/index'\nimport { NESCPUMap } from './memory-map'\nimport { cpuRunningHelper } from './cpu/utils'\nimport Screen from './screen/index'\nimport {Btn} from './joypad'\n\nconst bus = new Bus()\nconst cpu = new CPU(NESCPUMap, bus)\nconst cpuRunner = cpuRunningHelper(cpu)\n\nexport default {\n  bus: bus,\n  cpu: cpuRunner,\n  joypad: bus.joypad,\n  Btn: Btn,\n  Screen: Screen,\n  Cartridge: Cartridge\n}\n","import Bus from '../bus'\nimport { AddressingMode } from './addressing-mode'\nimport type { PS, REG, ICPU, BYTE } from './cpu.d'\nimport { Instructions } from './instructions'\nimport Opcode from './opcode'\nimport { ProcessorStatus, Registers, setFlag } from './registers'\n\nexport default class CPU implements ICPU{\n    Register: REG\n    PS: PS\n    memoryMap: any\n    bus: Bus\n    subClockCycleHandler: (cur: number) => void\n    private _clockCycle: number = 0\n\n    constructor (memoryMap: any, bus: any) {\n        this.bus = bus\n        this.bus.connectCPU(this)\n\n        this.memoryMap = memoryMap\n        this.PS = ProcessorStatus()\n        this.Register = Registers(this.PS)\n    }\n\n    get clockCycle () {\n        return this._clockCycle\n    }\n\n    step (): any {\n        /**\n         * if you want to run nestest.nes and gather logs,\n         * fetch registers and cycles before instruction running\n         * \n         * nestest log: https://www.qmtpro.com/~nes/misc/nestest.log\n         */\n        /*\n        const snapshot = {\n            PC: ('00' + to16(this.Register.PC)).slice(-4),\n            A: ('0' + to16(this.Register.A)).slice(-2),\n            X: ('0' + to16(this.Register.X)).slice(-2),\n            Y: ('0' + to16(this.Register.Y)).slice(-2),\n            P: ('0' + to16(this.Register.PS)).slice(-2),\n            SP: ('0' + to16(this.Register.SP)).slice(-2),\n            CYC: this.clockCycle\n        }\n        */\n\n        const { opcInfo, arg } = this.resolveAStatement()\n        const addrRes = AddressingMode[opcInfo.mode](this, arg, opcInfo.name)\n        const cycle = (opcInfo.cycles + Instructions[opcInfo.name](this, opcInfo.mode, addrRes))\n        this.takeCycles(cycle)\n\n        return {\n        //    ...snapshot,\n            opcInfo,\n            arg,\n            addrRes\n        }\n    }\n\n    resolveAStatement () {\n        const opcode = this.readByteByPC()\n        const opcInfo = Opcode[opcode]\n        if (!opcInfo) {\n            throw new Error(`opcode ${opcode.toString(16)} is not exist. PC: ${(this.Register.PC - 1).toString(16)}`)\n        }\n        let arg = 0\n        let i = 0\n        while (i < opcInfo.bytes - 1) {\n            const operand = this.readByteByPC()\n            arg |= (operand << (i * 8))\n            i++\n        }\n        if (isNaN(arg)) {\n            throw new Error(`argument ${arg} is not a number. opcode: ${opcode} addrmode: ${opcInfo.mode}`)\n        }\n        return {\n            opcInfo,\n            arg\n        }\n    }\n\n    readByteByPC (): BYTE {\n        return this.bus.memRead8(this.Register.PC++)\n    }\n\n    takeCycles (num = 1) {\n        for (let i = 0; i < num; i++) {\n            this._clockCycle++\n            this.bus.ppu.clockCycle += 3\n            if (typeof this.subClockCycleHandler === 'function') {\n                this.subClockCycleHandler(this.clockCycle)\n            }\n        }\n    }\n\n    IR_RESET () {\n        /**\n         * reset interrupt: \n         * 1. reset the state (register and flags)\n         * 2. set PC to the 16-bit address that stored at 0xfffc\n        */\n        this.Register.A = 0\n        this.Register.X = 0\n        this.Register.Y = 0\n        // ?\n        this.Register.PS = 0\n        // reference https://stackoverflow.com/questions/16913423/why-is-the-initial-state-of-the-interrupt-flag-of-the-6502-a-1\n        this.PS.I = 1\n        // ?\n        // this.PS.B = 0b11\n        this.PS.B = 0b10\n        // reference https://www.pagetable.com/?p=410\n        this.Register.SP = 0xfd\n\n        this.Register.PC = this.memRead(this.memoryMap.IR.RESET, 2)\n\n        this.takeCycles(7)\n    }\n\n    IR_NMI () {\n        /**\n         * 1. finishes exection of the current instruction\n         * 2. stores PC and PS on the stack\n         * 3. disables interrupts by setting Disable Interrupt flag in the PS\n         * 4. Loads the Address of Interruput handler routine from 0xfffa(for NMI)\n         * 5. sets PC register pointing to that address\n         */\n        this.push16(this.Register.PC)\n        setFlag.B(this.PS, 'NMI')\n        this.push8(this.Register.PS)\n\n        setFlag.I(this.PS, 0)\n        this.Register.PC = this.memRead(0xfffa, 2)\n    }\n\n    push8 (value: number) {\n        /**\n         * The CPU does not detect if the stack is overflowed\n         * by excessive pushing or pulling operations\n         * and will most likely result in the program crashing.\n         */\n        if (this.Register.SP < 0) {\n            throw new Error('Stack overflow')\n        }\n        this.memWrite(this.Register.SP + 0x100, value)\n        this.Register.SP--\n    }\n\n    push16 (value: number) {\n        const low8 = value & 0xff\n        const high8 = (value >> 8) & 0xff\n        this.push8(high8)\n        this.push8(low8)\n    }\n\n    pull8 () {\n        if (this.Register.SP === 0xff) {\n            throw new Error('Invalid pull')\n        }\n        this.Register.SP++\n        const res = this.memRead(this.Register.SP + 0x100)\n        return res\n    }\n\n    pull16 () {\n        const low8 = this.pull8()\n        const high8 = this.pull8()\n        return low8 | (high8 << 8)\n    }\n\n    memWrite (addr: number, value: number, byteNum: number = 1) {\n        if (byteNum === 1) {\n            this.bus.memWrite8(addr, value)\n        } else if (byteNum === 2) {\n            this.bus.memWrite16(addr, value)\n        } else {\n            throw new Error('value written in memory is too large.')\n        }\n    }\n\n    memRead (addr: number, byteNum: number = 1) {\n        if (byteNum === 1) {\n            return this.bus.memRead8(addr)\n        } else if (byteNum === 2) {\n            return this.bus.memRead16(addr)\n        } else {\n            throw new Error('the number of byte should not large than 2.')\n        }\n    }\n}\n","import type {RGB, Tile} from \"../ppu/ppu.def\"\n\nconst W = 256\nconst H = 240\n\nexport default class Screen {\n    scale: number = 1\n    canvas: HTMLCanvasElement\n    ctx: CanvasRenderingContext2D\n    imageData: ImageData\n    imageDataData: Uint8ClampedArray\n    constructor (canvas: HTMLCanvasElement, scale = 1) {\n        canvas.width = W * scale\n        canvas.height = H * scale\n\n        this.canvas = canvas\n        this.ctx = canvas.getContext('2d')\n        this.scale = scale\n\n        this.ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n        this.imageData = new ImageData(this.canvas.width, this.canvas.height)\n        this.imageDataData = this.imageData.data\n    }\n\n    drawAPixel (x: number, y: number, color: RGB) {\n        const S = this.scale\n        fillRect(\n            this.imageData.width,\n            this.imageDataData, color,\n            x * S, y * S, S, S\n        )\n    }\n\n    drawBg (tiles: Tile[]) {\n        for (let i = 0; i < tiles.length; i++) {\n            const X = i % (W / 8) * 8 * this.scale\n            const Y = Math.floor(i / (W / 8)) * 8 * this.scale\n            this.drawATile(tiles[i], X, Y)\n        }\n    }\n\n    drawATile (tile: Tile, X: number, Y: number) {\n        const S = this.scale\n        const W = this.imageData.width\n        for (let i = 0; i < 8; i++) {\n            for (let j = 0; j < 8; j++) {\n                const Y_ = Y + (i * S)\n                const X_ = X + (7 - j) * S\n                const pixel = this.imageData.data\n                const color = tile[i][j]\n                for (let y = Y_; y < Y_ + S; y++) {\n                    for (let x = X_; x < X_ + S; x++) {\n                        const index = y * W * 4 + x * 4\n                        if (color[3] === 0) {\n                            continue\n                        }\n                        pixel[index] = color[0]\n                        pixel[index + 1] = color[1]\n                        pixel[index + 2] = color[2]\n                        pixel[index + 3] = 255\n                    }\n                }\n            }\n        }\n    }\n    render () {\n        this.ctx.putImageData(this.imageData, 0, 0)\n    }\n}\n\nfunction fillRect (imageWidth: number, pixels: Uint8ClampedArray, color: RGB, X: number, Y: number, width: number, height: number) {\n    for (let y = Y; y < Y + height; y++) {\n        for (let x = X; x < X + width; x++) {\n            const index = y * imageWidth * 4 + x * 4\n            if (color[3] === 0) {\n                continue\n            }\n            pixels[index] = color[0]\n            pixels[index + 1] = color[1]\n            pixels[index + 2] = color[2]\n            pixels[index + 3] = 255\n        }\n    }\n}\n","/**\n * upon insertion into the console,\n * PRG ROM gets connected to CPU,\n * and CHR ROM gets connected to PPU.\n * on a hardware level, CPU wasn't able to access CHR ROM directly,\n * and PPU wasn't able to access RPG ROM\n * \n * mappers to provide access to extended ROM memory:\n * both CHR ROM and PRG ROM\n * extra RAM to save and restore a game state\n * \n * NES header 16 bytes\n * PRG ROM (size depends on byte 4 in header)\n * CHR ROM (size depends on byte 5 in header)\n * \n * byte 0 - 3: string \"NES^Z\" used to recognize\n * byte 4    : number of 16kB ROM banks (PRG ROM)\n * byte 5    : number of 8kB VROM banks (CHR ROM)\n * byte 6    : control byte 1\n * byte 7    : control byte 2\n * byte 8 - 9: size of PRG RAM in 8KB units\n * byte 10~  : reserved, must be zeros\n * \n */\n\nimport type {CartridgeResolvedData} from '../public.def'\nimport { \n    CHR_ROM_PAGE_SIZE,\n    Mirroring,\n    NESFileSymbol,\n    PRG_ROM_PAGE_SIZE\n} from \"../public.def\"\n\n/**\n * input: rom binary\n * output: CartridgeResolvedData\n */\n\nexport default class Cartridge {\n    binary: Uint8Array\n    constructor (binary: Uint8Array) {\n        this.binary = binary\n    }\n\n    resolve (): CartridgeResolvedData {\n        const byte0to3 = this.binary.slice(0, 4)\n        const PRGROMBanks = this.binary[4]\n        const CHRROMBanks = this.binary[5]\n        const controlByte1 = this.binary[6]\n        const controlByte2 = this.binary[7]\n        const PRGRAMUnits = this.binary.slice(8, 10)\n\n        for (let i = 0; i < byte0to3.length; i++) {\n            if (NESFileSymbol[i] !== byte0to3[i]) {\n                throw new Error('This file is not a .NES file.')\n            }\n        }\n\n        // byte 6\n        const verticalMirroring = controlByte1 & 1\n        const batteryBackedRAM = (controlByte1 >> 1) & 1\n        const haveTrainer = (controlByte1 >> 2) & 1\n        const fourScreenVRAM = (controlByte1 >> 3) & 1\n        const mapperTypeLowerBits = (controlByte1 >> 4) & 0b1111\n\n        // byte 7\n        const iNESEdition = (controlByte2 >> 2) & 0b11\n        const mapperTypeUpperBits = (controlByte2 >> 4) & 0b1111\n\n        if (iNESEdition !== 0b00) {\n            throw new Error('Do not support others iNES format except iNES 1.0.')\n        }\n\n        const PRGROMSize = PRGROMBanks * PRG_ROM_PAGE_SIZE\n        const CHRROMSize = CHRROMBanks * CHR_ROM_PAGE_SIZE\n\n        let PRGROMStart = 0x10\n        if (haveTrainer) {\n            PRGROMStart += 512\n        }\n        const CHRROMStart = PRGROMStart + PRGROMSize\n\n        console.log(`PRGROMSize:${PRGROMSize.toString(16)} CHRROMSize:${CHRROMSize.toString(16)}`)\n        return {\n            PRGROM: this.binary.slice(PRGROMStart, PRGROMStart + PRGROMSize),\n            CHRROM: this.binary.slice(CHRROMStart, CHRROMStart + CHRROMSize),\n            mapper: mapperTypeLowerBits | (mapperTypeUpperBits << 4),\n            screenMirroring: (function () {\n                if (fourScreenVRAM) {\n                    return Mirroring.FOUR_SCREEN\n                } else {\n                    return verticalMirroring ? Mirroring.VERTICAL : Mirroring.HORIZONTAL\n                }\n            })()\n        }\n    }\n}\n","<script lang=\"ts\">\n  import NES from '../core/nes.ts'\n  import '../../node_modules/nes.css/css/nes.css'\n\n  let canvas\n  let curPressed = null\n  let cartridgePath = null\n  let loading = false\n\n  function loadROM (path: string, callback: (x: any) => void) {\n    const xhr = new XMLHttpRequest()\n    xhr.responseType = 'arraybuffer'\n    xhr.open('GET', path, true)\n    xhr.onload = function (e) {\n        callback(xhr.response)\n    }\n    xhr.send()\n  }\n\n  function press (btnName: string) {\n    NES.joypad.setBtn(NES.Btn[btnName])\n    curPressed = btnName\n  }\n  function release () {\n    curPressed = null\n  }\n  document.onkeydown = (event) => {\n    const Btn = NES.Btn\n    switch (event.code.toLowerCase()) {\n      case 'keya':\n        press('Left')\n        break\n      case 'keyd':\n        press('Right')\n        break\n      case 'keys':\n        press('Down')\n        break\n      case 'keyw':\n        press('Up')\n        break\n      case 'keyj':\n        press('A')\n        break\n      case 'keyk':\n        press('B')\n        break\n      case 'enter':\n        press('Select')\n        break\n      case 'space':\n        press('Start')\n        break\n    }\n  }\n  document.onkeyup = () => {\n    release()\n  }\n  const cartridgeChange = (event) => {\n    if (!event.target.value) return\n\n    loading = true\n    const selected = Array.prototype.find.call(event.target, e => e.selected)\n    const originInnerText = selected.innerText\n    selected.innerText += ' - loading'\n\n    NES.cpu.stop()\n\n    loadROM(event.target.value, (buffer) => {\n      const cartridge = new NES.Cartridge(new Uint8Array(buffer))\n      NES.bus.connectScreen(new NES.Screen(canvas, document.body.clientWidth < 592 ? 1 : 2))\n      NES.bus.connectCartridge(cartridge)\n      NES.cpu.launch()\n\n      selected.innerText = originInnerText\n      loading = false\n    })\n  }\n\n  export {}\n</script>\n<div id=\"app\">\n  <h1 class=\"page-title\">Mengru's NES</h1>\n  <div class=\"nes-container with-title\">\n    <p class=\"title\">Hello</p>\n    <div class=\"lists\">\n      <ul class=\"nes-list is-disc\">\n        <li>Now this NES emulator only can run games without background scroll.</li>\n        <li>You can find source code in the <a href=\"https://github.com/mengrru/NES-Emulator\">repo</a>.</li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"nes-select\">\n    <select disabled={loading} on:change={cartridgeChange} required id=\"default_select\">\n      <option value=\"\" selected>No Cartridge Selected</option>\n      <option value=\"./cartridges/pac-man.nes\">Pac-Man</option>\n    </select>\n  </div>\n  <div class=\"nes-container is-rounded is-dark screen-container\">\n    <canvas bind:this={canvas} id=\"nes-canvas\"></canvas>\n  </div>\n  <div class=\"joypad-container\">\n    <div class=\"joypad-body\">\n      <div class=\"joypad-direction-keys\">\n        <div on:touchstart={() => press('Up')} on:mousedown={() => press('Up')} on:touchend={release} on:mouseup={release} class:pressed={curPressed === 'Up'} class=\"up\"><span class=\"nes-text is-primary\">W</span></div>\n        <div on:touchstart={() => press('Down')} on:mousedown={() => press('Down')} on:touchend={release} on:mouseup={release} class:pressed={curPressed === 'Down'} class=\"down\"><span class=\"nes-text is-success\">S</span></div>\n        <div on:touchstart={() => press('Left')} on:mousedown={() => press('Left')} on:touchend={release} on:mouseup={release} class:pressed={curPressed === 'Left'} class=\"left\"><span class=\"nes-text is-warning\">A</span></div>\n        <div on:touchstart={() => press('Right')} on:mousedown={() => press('Right')} on:touchend={release} on:mouseup={release} class:pressed={curPressed === 'Right'} class=\"right\"><span class=\"nes-text is-error\">D</span></div>\n        <div class=\"center\"></div>\n      </div>\n      <div class=\"joypad-function-keys\">\n        <div class=\"start\">\n          <p>START</p>\n          <div on:touchstart={() => press('Start')} on:mousedown={() => press('Start')} on:touchend={release} on:mouseup={release} class:pressed={curPressed === 'Start'} class=\"btn\"><span class=\"nes-text is-disabled\">SPACE</span></div>\n        </div>\n        <div class=\"select\">\n          <p>SELECT</p>\n          <div on:touchstart={() => press('Select')} on:mousedown={() => press('Select')} on:touchend={release} on:mouseup={release} class:pressed={curPressed === 'Select'} class=\"btn\"><span class=\"nes-text is-disabled\">ENTER</span></div>\n        </div>\n      </div>\n      <div class=\"joypad-ab-keys\">\n        <div class=\"b\">\n          <div on:touchstart={() => press('B')} on:mousedown={() => press('B')} on:touchend={release} on:mouseup={release} class:pressed={curPressed === 'B'} class=\"btn nes-badge\"><span class=\"is-error\">K</span></div>\n          <p>B</p>\n        </div>\n        <div class=\"a\">\n          <div on:touchstart={() => press('A')} on:mousedown={() => press('A')} on:touchend={release} on:mouseup={release} class:pressed={curPressed === 'A'} class=\"btn nes-badge\"><span class=\"is-error\">J</span></div>\n          <p>A</p>\n        </div>\n      </div>\n      <div class=\"joypad-logo\">\n        Nintendo®\n      </div>\n    </div>\n  </div>\n  <p></p>\n</div>\n<style>\n  div, span {\n    font-family: 'Courier New', Courier, monospace;\n  }\n  .page-title {\n    text-align: center;\n  }\n  .pressed {\n    opacity: .7;\n  }\n  #app {\n    background-color: #fff;\n    max-width: 600px;\n    width: 100%;\n    min-height: 100%;\n    margin: 0 auto;\n    padding: 1em 1em;\n  }\n  .screen-container {\n    width: 100%;\n    text-align: center;\n    margin-left: -1px !important;\n  }\n  .joypad-container {\n    padding-top: 2.6rem;\n  }\n  .joypad-container::before {\n    content: \"\";\n    width: 1.8rem;\n    height: 1.8rem;\n    display: block;\n    background-color: #3E3634;\n    margin: 0 auto;\n    box-shadow: -1.7rem -1.7rem 0px 0px #3E3634,\n      -1.7rem -3.4rem 0px 0px #3E3634;\n  }\n  .joypad-body {\n    width: 100%;\n    padding: 15% 0;\n    background-color: #3E3634;\n    border: 2rem solid #c3c3c3;\n    box-sizing: border-box;\n    position: relative;\n  }\n  .joypad-direction-keys {\n    width: 7.5rem;\n    height: 7.5rem;\n    position: absolute;\n    top: 50%;\n    left: 6%;\n    transform: translateY(-50%);\n  }\n  .joypad-direction-keys div {\n    background-color: #c3c3c3;\n    width: 2.5rem;\n    height: 2.5rem;\n    position: absolute;\n  }\n  .joypad-direction-keys div span {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 2rem;\n    font-weight: bold;\n  }\n  .joypad-direction-keys .up {\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .joypad-direction-keys .down {\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .joypad-direction-keys .left {\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  .joypad-direction-keys .right {\n    right: 0;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  .joypad-direction-keys .center {\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n  .joypad-function-keys {\n    width: 9rem;\n    height: 3rem;\n    position: absolute;\n    top: 58%;\n    left: 48%;\n    transform: translate(-50%, -50%);\n  }\n  .joypad-function-keys > div {\n    width: 46%;\n    display: inline-block;\n    position: relative;\n  }\n  .joypad-function-keys span {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 1rem;\n    font-weight: bold;\n  }\n  .joypad-function-keys > div > p {\n    margin: 0;\n    margin-bottom: .3em;\n    text-align: center;\n    color: #BF1710;\n    font-weight: bold;\n    font-size: 1rem;\n  }\n  .joypad-function-keys .btn {\n    width: 100%;\n    height: 2rem;\n    background-color: #787973;\n    position: relative;\n  }\n  .joypad-ab-keys {\n    width: 9rem;\n    height: 3rem;\n    position: absolute;\n    top: 72%;\n    right: 5%;\n    transform: translateY(-50%);\n  }\n  .joypad-ab-keys > div {\n    width: 45%;\n    display: inline-block;\n    position: relative;\n  }\n  .joypad-ab-keys .btn {\n    width: 80%;\n  }\n  .joypad-ab-keys > div > p {\n    text-align: right;\n    color: #BF1710;\n    font-weight: bold;\n    font-size: 1rem;\n  }\n  .joypad-logo {\n    color: #BF1710;\n    font-weight: bold;\n    position: absolute;\n    right: 7%;\n    top: 16%;\n    font-size: 1.5rem;\n  }\n  @media (max-width: 592px) {\n    html {\n      font-size: 14px;\n    }\n    .joypad-function-keys > div {\n      width: 40%;\n    }\n    .joypad-ab-keys {\n      top: 60%;\n    }\n    .joypad-ab-keys > div {\n      width: 40%;\n    }\n  }\n</style>\n","import App from './index.svelte'\n\nconst app = new App({\n  target: document.body\n})\n\nexport default app\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","detach","parentNode","removeChild","element","name","document","createElement","space","data","createTextNode","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","toggle_class","toggle","classList","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","$$","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_mount","on_destroy","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","c","intro","block","delete","local","anchor","customElement","m","new_on_destroy","map","filter","mount_component","NESFileSymbol","Mirroring","NESCPUMap","ADDR_SPACE","CPU_RAM_START","CPU_RAM_END","PPU_REG_START","PPU_REG_END","PRG_ROM_START","PRG_ROM_END","IR","RESET","PPUReg","FlagReg","constructor","this","set","toString","split","reverse","e","parseInt","get","join","updateBit","SingleWriteReg","inc","n","sum","DoubleWriteReg","updateByte","sethi","reset","REG_Controller","ppu","super","nametable","vramAddrInc","v","spriteAddr","backgroundAddr","spriteSize","ppuSelect","hasNMI","before","regStatus","inVblank","IR_NMI","REG_Mask","greyscale","showBgInLeftmost","showSpritesInLeftmost","showBg","showSprites","emRed","emGreen","emBlue","REG_Status","spriteOverflow","sprite0Hit","REG_OAMAddress","REG_OAMData","REG_Scroll","x","y","REG_Address","REG_Data","REG_OAMDMA","hexColor","slice","Scanline","PPUTiming","exec","scanline","cycle","t","f","setAction","isSprite0Hit","frame","regController","renderingEnable","action","isArray","j","CHR_ROM_START","CHR_ROM_END","VRAM_START","VRAM_END","PALETTES_START","PALETTES_END","PPU","bus","LEN","res","VRAMAddr","mappedIndex","Math","floor","attrIndex","computedAttributeIndex","paletteIndexPosi","computedPaletteIndexPosi","genVRAMMap","CHRROM","rom","mirroring","screenMirroring","clockCycle","_clockCycle","old","tick","write","self","PPUReg_Controller","PPUReg_Mask","regMask","PPUReg_OAM_Address","regOAMAddress","regOAMData","OAMRead","PPUReg_OAM_Data","OAMWrite","PPUReg_Scroll","regScroll","w","PPUReg_Address","regAddress","PPUReg_Data","regData","memWrite","OAM_DMA","page","regOAMDMA","writePagetoOAM","read","PPUReg_Status","addr","memRead","timing","OAMData","cpu","VRAMRead","realAddr","mirroringAddr","VRAM","VRAMWrite","VRAMMap","internalBuf","paletteTable","console","warn","renderBackground","renderSprites","screen","render","nametableStartAddr","CHRBank","startVRAMAddr","attributeTable","scale","tileStartAddr","paletteIndex","getPaletteIndex","tile","combineToATile","getBgPalette","drawATile","oam","index","flipH","flipV","palette","getSpritePalette","tiles_test","len","output","VERTICAL","HORIZONTAL","low","high","h","isSprite","undefined","code","ByteN","Colors","Btn","JoyPad","A","strobe","curReportedBtn","btn","setBtn","initUI","onkeydown","toLowerCase","Left","Right","Down","Up","B","Select","Start","Addr","Max","Logger","static","text","innerText","getElementsByTagName","log","int8","uint16","isCrossPage","addr1","addr2","to16","AddressingMode","I","arg","Z","ZX","Register","X","ZY","Y","AX","AY","IN","instruction","pageHead","hi","IX","IY","IM","R","AC","setFlag","PS","C","bit4","N","Instructions","ADC","mode","addrRes","V","SBC","AND","ASL","BCC","oldPC","PC","BCS","BEQ","BIT","BMI","BNE","BPL","BRK","push16","push8","BVC","BVS","CLC","CLD","D","CLI","CLV","CMP","r","CPX","CPY","DEC","DEX","DEY","INC","INX","INY","EOR","JMP","JSR","RTS","pull16","LDA","LDX","LDY","LSR","NOP","ORA","PHA","PHP","PLA","pull8","PLP","ROL","ROR","RTI","SEC","SED","SEI","STA","STX","STY","TAX","TAY","TSX","SP","TXA","TXS","TYA","AAC","AAX","ARR","bit5","bit6","ASR","ATX","AXA","AXS","DCP","DOP","ISC","KIL","Error","LAX","RLA","RRA","SLO","SRE","TOP","XAA","opcode","bytes","cycles","pageCycles","memory","_joypad","memoryReset","PRGROMLen","_PRGROMLen","_rom","_ppu","_cpu","_screen","joypad","connectCartridge","cartridge","cdata","PRGROM","IR_RESET","connectScreen","connectCPU","memWrite8","readPage","memRead8","readPRGROM","memWrite16","memRead16","Min","hiAddr","memoryMap","step","opcInfo","resolveAStatement","takeCycles","readByteByPC","Opcode","isNaN","num","subClockCycleHandler","low8","high8","byteNum","cpuRunner","timeout","animationFrameId","runningCallbackTable","shouldStop","curClockCycle","T","stop","cancelAnimationFrame","s","P","CYC","launch","done","F","FPS","ceil","RunnerStepCount","RunnerInterval","lastTime","window","performance","now","runner","curTime","requestAnimationFrame","clearInterval","launchWithLog","setInterval","registerRunningCallback","cpuRunningHelper","Screen","canvas","width","height","getContext","clearRect","imageData","ImageData","imageDataData","drawAPixel","color","S","imageWidth","pixels","fillRect","drawBg","tiles","W","Y_","X_","pixel","putImageData","Cartridge","binary","byte0to3","PRGROMBanks","CHRROMBanks","controlByte1","controlByte2","verticalMirroring","haveTrainer","fourScreenVRAM","mapperTypeLowerBits","mapperTypeUpperBits","PRGROMSize","CHRROMSize","PRGROMStart","CHRROMStart","mapper","FOUR_SCREEN","insertBefore","insert","curPressed","loading","press","btnName","NES","release","onkeyup","selected","prototype","find","call","originInnerText","path","xhr","XMLHttpRequest","responseType","open","onload","response","send","loadROM","buffer","Uint8Array","body","clientWidth","$destroy","detaching","d","destroy_component","$on","type","indexOf","splice","$set","$$props","obj","$$set","keys"],"mappings":"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"}